*	Copyright 2017, David Shields
v

* This file is part of the fribble project:
*		http://github.com/daveshields/fribble.
*
*	Fribble is free software: you can redistribute it and/or modify
*	it under the terms of the gnu general public license as
*	published by the free software foundation, either
*	version 2 of the license, or (at your option) any later version.
*
*	Fribble is distributed in the hope that it will be useful,
*	but without any warranty; without even the implied warranty of
*	merchantability or fitness for a particular purpose.  See the
*	gnu general public license for more details.
*
*	You should have received a copy of the gnu general public
*	license along with fribble.
*	If not, see <http://www.gnu.org/licenses/>.

*	Utility functions

	define('init(type,dictfile,skip,external)c,i,j,s,t')	:(init.end)

*	Initialize global variables.

*INIT*
init

	init.options(type)

*	Do not initialize dictionary and permutation map
*	if TYPE is not null.

	differ(type)					:s(return)

*	Global Variables

*	Global variables have names starting with 'g.'
*	Their initial value is set in the procedure INIT() and
*	its subfunctions.

*	g.version is the version of the program:

	g.version = '1.0';* 16 March 2017

*	g.board, array('15,15'), the playing board. Each entry is
*	 blank (' ') for an unplayed cell, or is the letter played.

*	g.bonus.lines,array(30), is the array of lines corresponding
*	to g.bonus

*	g.channel.temp is channel number used for temporary files,
*	that is, files that are opened, read, and then immediately
*	closed.

	g.channel.temp = 4

	g.clines = array(8);* for line with move and its crossing lines.
	g.cln = 0;* number of entries in clines.

*	g.date, date and time at start of run. Used to name log
*	file and seed the random number generator.

	g.date = date()

*	g.dict, array(15), is an array of hashtables  that are non-null
*	for words in the dictionary.

	g.highest = 0;* highest score
	g.lowest = 0;* lowest cost

*	Set g.log non-null to append a copy of standard output to
*	a log file. The name of the log file is derived from the
*	date and time of program execution.

	g.log =

*	g.logfile is the output-associated variable for the log file
*	g.logfile.channel is its channel; g.logfile.name is its name

	g.logfile = g.logfile.name =
	g.logfile.channel = 5

*	g.maxmoves, maximum number of moves. This is used to avoid
*	runaway behavior.

	g.maxmoves = 3
	g.maxmoves = 60

*	g.lines, array(30), is the array of the lines defined by the
*	rows and columns in the board.

*	A move consists of a sequence of empty cells in a row or column
*	such that at least one cell in the sequence is adjacent
*	to an already occupied cell, with each cell occupied by one
*	of the tiles in the player's rack.  The cells are ordered
*	from left to right for a horizontal play, top to bottom
*	for a vertical play.


	data('move(id,free,tiles,points)')

*		ID	gives the line number, in the range 1..30;
*		FREE	is an array of the free (empty) cells
*			used in this move;
*		TILES	is the string of tiles of the move; and
*		POINTS	is the number of points won by playing this move.

*	g.move is the current/last move.

*	g.options maps option names to their value
*	g.options.abbrev maps a shorted form of an option to its full
*	name; see init() for details.

*	A player is represented by

	data('player(pid,name,kind,rack,total,thirty,highest)')

*	where
*		PID		is an integer identifier, either 1 or 2;
*		NAME 		is the player's name;
*		KIND	 	is the player's kind:

		  player.kind.move = 1;* tiles and state of board are read from standard input;
		  player.kind.solo = 2;* you are playing on your own;
		  player.kind.auto = 3;* fribble plays against itself;
		  player.kind.team = 4;* you and fribble work as a team; and
		  player.kind.foe  = 5;* the other player when in team mode.

*		RACK 		is the player's rack;
**		TOTAL		is the player's current score;
**		THIRTY 	is number of moves with scores of 30
*				or more points;
**		HIGHEST 	is the player's highest move score.

	g.players is an array of the two players.

	g.players = array(2)
	g.players[1] = player(1)
	g.players[2] = player(2)

*	g.pid is the player of the current player.

	g.pid = 1

*	g.bonus,array(15,15) gives the bonus values for the squares on the board:

*		1	for the value of the letter itself,
*		2	for double letter,
*		3	for triple letter,
*		4	for double word, and
*		5	for triple word.

*	A paired line consists of a line number and an associated line.
*	It is used when it is necessary to pass a line of text to a procedure
*	along with line number from where it was derived.

		data('pair(num, line)')

*	g.permutations, a table of the permutations of n=1..7 things
*	taken 1..k at a time.
*	For example, g.perms['7?3'] is permutations of 1..7
*	taken 3 at a time.
*	Each entry in the table is an array giving the desired
*	set of permutations.

*	g.permutations.count, a table of the number of permutations
**	for a given N and *k*.

*	g.random_var is used by random() to compute the next
*	pseudo-random value.

	g.random_var = 	substr(g.random_var,10,2) substr(g.random_var,13,2)
.			substr(g.random_var,16,2)
	g.random_var = +g.random_var

*	g.replay.lines holds the lines read in for subsequence replaying.
*	g.replay is the index of the last line read in from the replay file.
*	g.replay.n is the number of lines in the replay file.

*	g.scoring is used to enable tracing of scoring.

	g.scoring = 1
	g.scoring =

*	g.tiles, a string containing the characters in the
*	initial bag of characters.

*	g.tilemanager determines how tiles are dealt out.
*	If not null, the program manages the tiles and updates the players'
*	racks after each turn.  If null, then you manually update the racks.

	g.tilemanager =

*	g.time is used to measure elapsed time (in milliseconds).

	g.time = time()

*	g.trace, if not null, begin tracing at the start of move g.trace.

	g.trace =

*	g.tracing, set nonzero when tracing initiated by *g.trace* begins.

*	g.turn, the number of the current turn
*	g.lastmove, the turn when the last move was made.

	g.turn = g.lastmove = 0

*	g.used, array('15,15') tracks the cells in the board that have been
*	used in a move.  A move made after the first move must have at least one
*	tile played in a square adjacent to another that has been
*	used in a prior move.

*	g.used.lines, array(30), an array of lines defined by the rows and columns
*	 of the used grid.

*	g.value, a map from characters to the tile value of that character.

*	The variables for row and column numbers are used
*	for the input of moves. They map name to line number.

	r1 = r01 = 1; r2 = r02 = 2; r3 = r03 = 3; r4 = r04 = 4; r5 = r05 = 5;
	r6 = r06 = 6; r7 = r07 = 7; r8 = r08 = 8; r9 = r09 = 9; r10 = 10
	r11 = 11; r12 = 12; r13 = 13; r14 = 14; r15 = 15
	c1 = c01 = 16; c2 = c02 = 17; c3 = c03 = 18; c4 = c04 = 19; c5 = c05 = 20
	c6 =  c06 = 21; c7 = c07 = 22; c8 = c08 = 23; c9 = c09 = 24;
	c10 = 25; c11 = 26; c12 = 27; c13 = 28; c14 = 29; c15 = 30

	g.dict = array(15)
	init.dict(dictfile,skip)

	g.permutations = table(7)
	g.permutations.count = table(100)
	init.perm('perm.txt')

	g.board = array('15,15',' ')
	g.lines = lines(g.board)
	g.used = array('15,15',' ')
	g.used.lines = lines(g.used)
	init.bonus()
	init.number()
	init.tiles()
	init.value()
	randomseed();* seed the random number generator
	ident(type)					:s(return)
	
init.clear

	c01 = c02 = c03 = c04 = c05 = c06 = c07 = c08 = c09 = 
	r01 = r02 = r03 = r04 = r05 = r06 = r07 = r08 = r09 = r1 =
	g.board = g.bonus = g.bonus.lines = g.channel.temp = g.clines = g.cln =
	g.cmap = g.date = g.dict = g.dmap = g.dumb = g.grid = g.highest = g.lastmove =
	g.lines = g.log = g.logfile = g.logfile.channel = g.logfile.name = g.lowest =
	g.maxmoves = g.mode = g.mode.auto = g.mode.solo = g.mode.team = g.move =
	g.numbers = g.options = g.options.abbrev = g.permutations = g.permutations.count =
	g.pid = g.players = g.random_var = g.replay.i = g.replay.lines = g.replay.n =
	g.scoring = g.seen = g.shell = g.showscore = g.signature = g.tilemanager = g.tiles =
	g.time = g.trace = g.tracing = g.tried = g.turn = g.used = g.used.lines = g.value =
	g.version =
	r10 = r11 = r12 = r13 = r14 = r15 = r2 = r3 = r4 =
	r5 = r6 = r7 = r8 = r9 =
	c1 = c10 = c11 = c12 = c13 = c14 = c15 =
	c2 = c3 = c4 = c5 = c6 = c7 = c8 = c9 =
							:(return)
init.end

	define('init.bonus()s,row,col,b,c')		:(init.bonus.end)

*	Initialize the bonus squares for the 15x15 grid:
*		1 for the value of the letter,
*		2 for double letter,
*		3 for triple letter,
*		4 for double word, and
*		5 for triple word.

*INIT.BONUS*
init.bonus

	g.bonus = array('15,15','1')
	s = 	'5 0104 3 0107 3 0109 5 0112 2 0203 4 0206 4 0210 2 0213 '
.		'2 0302 2 0305 2 0311 2 0314 5 0401 3 0404 4 0408 3 0412 5 0415 '
.		'2 0503 2 0507 2 0509 2 0513 4 0602 3 0606 3 0610 4 0614 '
.		'3 0701 2 0705 2 0711 3 0715 4 0804 4 0812 3 0901 2 0905 2 0911 '
.		'3 0915 4 1002 3 1006 3 1010 4 1014 2 1103 2 1107 2 1109 2 1113 '
.		'5 1201 3 1204 4 1208 3 1212 5 1215 2 1302 2 1305 2 1311 2 1314 '
.		'5 1403 4 1406 4 1410 2 1413 5 1504 3 1507 3 1509 5 1512 '

init.bonus.1

	s len(1) . b ' ' len(2) . row len(2) . col ' ' =  :f(init.bonus.next)
	g.bonus[+row,+col] = +b				:(init.bonus.1)

init.bonus.next

	g.bonus.lines = lines(g.bonus)			:(return)

init.bonus.end

	define('init.dict(filename)file,i,n,w,s')	:(init.dict.end)

*	Initialize the global dictionary g.dict.

*INIT.DICT*
init.dict

*	Set hash table sizes according to number of words of given length.

	s  =	'1 100 1000 4000 9000 15000 23000 28000 25000 20000 '
.		'15000 11000 8000 5000 3000 '

init.dict.tbl

	gt(i = i + 1,15)				:s(init.dict.tbl.1)
	s break(' ') . n ' ' =
	g.dict[i] = table(+n)				:(init.dict.tbl)

init.dict.tbl.1

	i = 0

*	Read in dictionary from a file, with one word per line.

	filename = ident(filename) 'dict.txt'
	input(.file,g.channel.temp,filename)		:s(init.dict.in)
	out('unable to open input file ',filename)	:(freturn)
	n = 0

init.dict.in

	w = file					:f(init.dict.done)
	gt(size(w),15)					:s(init.dict.in)

*	Process plural words, indicated by 'S' at end.

	differ(substr(w,size(w),1),'S')			:s(init.dict.w)
	w = substr(w,1,size(w) - 1)
	g.dict[size(w)][w] = +1
	g.dict[size(w) + 1][w 's'] = +1			:(init.dict.in)

init.dict.w

	g.dict[size(w)][w] = +1				:(init.dict.in)

init.dict.done

	endfile(g.channel.temp)				:(return)

init.dict.end

	define('init.number()i1,i2,i3,i4,s1,s2,w')		:(init.number.end)

*	Initialize g.numbers.

init.number

	s1 =	'one two three four five six seven eight nine ten eleven twelve '
.		'thirteen fourteen fifteen sixteen seventeen eighteen nineteen '
	s2 =	'twenty thirty forty fifty sixty seventy eighty ninety '
	i1 = 0; i2 = +10; i3 = +20; i4 = +10

	g.numbers = table(100)
	g.numbers[100] = 'one hundred'

init.number.digits

	s1 break(' ') . w ' ' =				:f(init.number.tens)
	g.numbers[i1 = i1 + 1] = w			:(init.number.digits)

init.number.tens

	gt(i2 = i2 + 10,90)				:s(init.number.decades)
	s2 break(' ') . w ' ' =
	g.numbers[i2] = w				:(init.number.tens)

init.number.decades

	gt(i4 = i4 + 10, 90)				:s(return)

init.number.loop

	gt(i3 = i3 + 1,99)				:s(return)
	eq(remdr(i3,10))				:s(init.number.decades)
	g.numbers[i4 + remdr(i3,10)] = g.numbers[i4] ' ' g.numbers[remdr(i3,10)]
.					:s(init.number.loop)f(return)
init.number.end

	define('init.options(type)s,t,options,optname,opt,val,cname')	:(init.options.end)

*	Initialize command line options.
*	List options unless TYPE is not null.

init.options

*	Set up map from first two characters of option name to full name.

	s = ' auto dumb moves random seen shell solo team trace '

	g.options = table()
	g.options.abbrev = table()

init.options.abbrev

	s span(' ') =
	ident(s)					:s(init.options.abbrev.done)
	s break(' ') . opt = 				:f(init.options.abbrev.done)

	g.options.abbrev[substr(opt,1,2)] = opt	:(init.options.abbrev)

init.options.abbrev.done

*	Enter default options, those with non-null initial value.
*	These values may be changed if they also occur in the
*	actual option list.

	options = '-uauto -umoves=' g.maxmoves ' '
*.		'-urandom=' g.random_var  ' '
	g.options['auto'] = 1
	g.options['moves'] = g.maxmoves
*	g.options['random'] = g.random_var
	options = options host(0) ' '

init.options.next

	val = 1
	options '-u' =					:f(init.options.done)
	options break(' ') . opt span(' ') =

init.options.opt

	lt(size(opt),3) out('no such option ',opt,'  - ignoring.')
.						:s(init.options.next)
	optname = g.options.abbrev[substr(opt,1,2)]
	ident(optname) out('no such option,' opt ',- ignoring.')
.						:s(init.options.next)

	opt 'no'				:s(init.options.no)
	opt break('=')				:s(init.options.val)

	cname = 'init.options.opt.' optname
	:($('init.options.opt.' optname))

init.options.no

*	'no' before option name sets val to zero.

	opt 'no' =
	val = 0
							:(init.options.opt)
init.options.set

*	Set value for command options.

	g.options[optname] = val			:(init.options.next)

init.options.val

*	'=' is followed by value

	opt break('=') . opt '=' rem . val		:(init.options.opt)

init.options.opt.auto

	g.mode = g.mode.auto				:(init.options.next)

init.options.opt.dumb

	g.dumb = val					:(init.options.set)

init.options.opt.moves

	g.maxmoves = val				:(init.options.set)

init.options.opt.random

	g.random_var = (ne(val) val,2017)		:(init.options.set)

init.options.opt.seen

	g.seen = val					:(init.options.set)

init.options.opt.shell

	g.shell = val					:(init.options.set)

init.options.opt.solo

	g.mode = g.mode.solo				:(init.options.next)

init.options.opt.team

	g.mode = g.mode.team				:(init.options.next)

init.options.opt.trace

	val = ident(val) 1
	g.trace = val					:(init.options.set)

init.options.done

	differ(type)					:s(return)
	out('Options:')
	show(g.options)					:(return)

init.options.end

	define('init.perm(filename)line,ifile,n,k,lines,nread')	:(init.perm.end)

*	Initialize the list of possible permutations from a file.

*INIT.PERM*
init.perm

	input(.ifile,g.channel.temp, filename)    	 :s(init.perm.next)
	out('unable to open permutation file ',filename) :(freturn)

init.perm.next

	line = ifile					:f(init.perm.done)
	line break('?') . n '?' break(' ') . k ' ' rem . count :f(init.perm.err)
	g.permutations.count[n '?' k] = count
	ara = array(count)
	ai = 0

init.perm.array

	ara[ai = ai + 1] = ifile		:s(init.perm.array)
	g.permutations[n '?' k] = ara		:(init.perm.next)

init.perm.done

	endfile(g.channel.temp)				:(return)

init.perm.err

	out('init.perm error, line ' lines '  '  line) :(freturn)

init.perm.end

	define('init.tiles()ch,n,s')		:(init.tiles.end)

* 	Initialize set of tiles, ignoring the 'blank' tiles for now.

*INIT.TILESET*
init.tiles

	s = 'a 9 b 2 c 2 d 5 e 13 f 2 g 3 h 4 i 8 j 1 k 1 l 4 m 2 '
.           'n 5 o 8 p 2 q 1 r 6 s 5 t 7 u 4 v 2 w 2 x 1 y 2 z 1 '
	g.tiles =

init.tiles.ch

	s break(' ') . ch ' ' break(' ') . n ' ' = :f(init.tiles.ch.done)
	g.tiles = g.tiles dupl(ch,n)		   :(init.tiles.ch)

init.tiles.ch.done

	randomseed();* set random number generator seed

	shuffle();* shuffle the tiles
							:(return)

init.tiles.end

	define('init.value()s,c')			:(init.value.end)
*INIT.VALUE*
init.value

	g.value = table(52)
	s = &lcase &ucase

*	Assume value of a tile is one, and correct that below.

init.value.next

*	assume value is 1
	s len(1) . c =					:f(init.value.letters)
	g.value[c] = +1					:(init.value.next)

init.value.letters

*	Update assumptions for letters with value greater than one.

	s =
.	'b 4 c 4 d 2 f 4 g 3 h 3 j 10 k 5 l 2 m 4 '
.	'n 2 p 4 q 10 u 2 v 5 w 4 x 8 y 3 z 10 '
.	'B 4 C 4 D 2 F 4 G 3 H 3 J 10 K 5 L 2 M 4 '
.	'N 2 P 4 Q 10 U 2 V 5 W 4 X 8 Y 3 Z 10 '

init.value.update

	s break(' ') . c ' ' break(' ') . v ' ' =	:f(return)
	g.value[c] = +v					:(init.value.update)

init.value.end

