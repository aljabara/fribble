* This software is licensed under the MIT License, contained in the file LICENSE.

* Copyright (c) 2016 dave shields

*	Global Variables

*	Here are the global variables. Each has a name starting with 'g.' Their initial value is set in the
*	procedure *init()*.

*	g.board, array('15,15'), the playing board. Each entry is blank (' ') for unplayed cell, or is the letter played.

*	A play is a sequence of one or more cells, represented as an array.  The cells are ordered
*	from left to right for a horizontal play, top to bottom for a vertical play.

*	g.dict, array(15), is an array of hashtables  that are non-null for words in the dictionary.
	g.dict = array(15)

*	g.alone, array('15,15') tracks the *alone* cells in the board. A cell is *alone* if it is empty and all its
*	neighbors are empty. A move made after the first move cannot consist only of cells that are alone. 
*	That is, at least one tile in a valid move must be adjacent to a tile played in a previous move.

*	g.alone.lines, array(30), is the array of lines defined by the rows and columns of the alone grid.

*	g.lines, array(30), is the array of the lines defined by the rows and columns in the board. 

*	g.perms, a table of the permutations of n=1..7 things taken 1..k at a time.
*	For example, g.perms['7?3'] is permutations of 1..7 taken 3 at a time, as a string with
*	entries separated by a space.

*	g.rack, a string containing the current rack. Plays are made using the characters from the rack.

*	g.tileset, a string containing all the characters in the initial bag of characters.

*	g.value, a map from characters to the tile value of that character.

*	g.avail, array(15), is the result of applying the procedure available() to g.line.


*	A move is a sequence of empty cells in a row or column such that at least one cell in the sequence 
*	is adjacent to an already occupied cell.
*	The field *id* gives the line number, in the range 1..30; *count* is the number of free cells covered by this move;
*	*free* is an array of dimension *count* giving the empty cells to be filled by this move; and *points*
*	is the number of points gained. by playing this move.

	data('move(id,count,free,text,points)')

*	g.bonus,array(15,15) gives the bonus values for the squares on the board, using 
*		1 for the value of the letter itself
*		2 for double letter,
*		3 for triple letter, 
*		4 for double word, 
*		5 for triple word.

*	g.bonus.lines,array(30), is the array of lines corresponding to g.bonus

*	Utility functions

	define('init(dictfile,skip)c,i,j,s,t')		:(init.end)

*	Initialize global variables.

init
	g.board = array('15,15',' ')
	g.lines = lines(g.board)

	g.alone = array('15,15','1')
	g.alone.lines = lines(g.alone)

	init.bonus()

*	Initialize set of moves.

	g.move = array(7);* at most seven tiles can be played at a time
	g.len = 0

*	Initialze permutation map.

	init.perm('../perm.txt')

	init.tileset()

	init.value()

	init.dict(dictfile,skip)
							:(return)
init.end

	define('add(str,word)')				:(add.end)

*	add word to string str, prefixing with a space if str is not null.
*	this aids in building list of words separated by spaces.

add
	add = ident(str) word				:s(return)
	add = str ' ' word				:(return)
add.end

	define('after(num)')				:(after.end)

*	Find the line 'after' line *num*. This is either the row below or the column to the right, or
*	null if line *num* is at the edge of the board

after
	after = (eq(num,1) '', eq(num,15) '',g.lines[num + 1])	:(return)
after.end

	define('available(line)blanks,c,i')			:(available.end)

*	Return array containing the indexes of the blank cells in line. Fails if no blanks.
available
	c = substr(line, i = i + 1, 1)				:f(available.1)
	differ(c,' ')						:s(available)
	blanks = blanks + 1					:(available)
available.1
	eq(blanks,0)						:s(freturn)
	available = array(blanks)
	i = ai = 0
available.2
	c = substr(line, i = i + 1, 1)				:f(return)
	differ(c,' ')						:s(available.2)
	available[ai = ai + 1] = +i				
*	output = 'ai ' lpad(ai,2) '  ' +i
								:(available.2)
available.end

	define('before(num)')				:(before.end)

*	Find the line 'before' line *num*. This is either the row above or the column to the left, or
*	null if line *num* is at the edgs of the board

before
	before = (eq(num,1) '', eq(num,16) '',g.lines[num - 1])	:(return)
before.end
	
	define('blanks(line)n')				:(blanks.end)

*	Count number of blanks in line.

blanks
	line len(1) . c =				:f(return)
	blanks = ident(c,' ') blanks + 1		:(blanks)
blanks.end

	define('bonus.lines()i')			:(bonus.lines.end)

bonus.lines
	bonus.lines = array(30)
bonus.lines.next
	gt(i = i + 1,15)				:s(return)
	bonus.lines[i] = hline(g.bonus,i)
	bonus.lines[i + 15] = vline(g.bonus,i)		:(bonus.lines.next)
bonus.lines.end

	define('cells(move)r,c,t,text,i,n')		:(cells.end)

*	Return the cells that comprise a move, by which we mean a list consisting of a series of one or more
*	placements, each consisting of a string of one or more characters followed by a signed integer with
*	a specified form. The signed integer identifies where the placement is in a row (plus sign) or
*	along a column (minus sign). The cell is indicated by multiplying the row number by one hundred and adding the
*	column number.

cells
	move break('+-') . text len(1) . sign rem . rc
	output = 'text ' text '|' sign '|' rc

	n = size(text)
	cells = array(size(text) ',3')
	ident(sign,'+')					:s(cells.h)
	ident(sign,'-')					:s(cells.v)
	output = 'improper type in move ' move		:(freturn)
cells.h
	i = i + 1
	gt(i,n)						:s(return)
	cells[i,1] = +(rc / 100)			:f(return)
	cells[i,2] = remdr(rc,100)
	cells[i,3] = substr(text,i,1)
	c. = c + 1					:(cells.h)
cells.v
	i = i + 1
	gt(i,n)						:s(return)
	cells[i,1] = +(rc / 100)			:f(return)
	cells[i,2] = +remdr(rc,100);
	cells[i,3] = substr(text,i,1)
	r = r + 1					:(cells.v)
cells.end
	
	define('checkline(line)word')			:(checkline.end)

*	Succeeds if all the words in the line are in the dictionary, fails otherwise.

checkline
	line = line ' '
checkline.1
	line span(' ') =
	ident(line)					:s(return)
	line break(' ') . word span(' ') =
	valid( word)					:f(freturn)s(checkline.1)
checkline.end

	define('checklines()i,lines')			:(checklines.end)

*	Succeeds if every line in the board has only valid words.

checklines
	lines = lines(g.board)
checklines.next
	gt(i = i + 1,30)				:s(return)
	checkline(lines[i])				:f(freturn)s(checklines.next)
checklines.end

	define('checkword(w)')				:(checkword.end)

*	Succeeds if w is in the global dictionary, fails otherwise.

checkword
	differ(g.dict[size(w)][w])			:s(return)f(freturn)
checkword.end

*	define('clean()row,col,c,ch,b')			:(clean.end)
*
**	Clean up the board after deciding on a move.
**	For each new cell, clear the bonus value and the new indicator.
*
*clean
*	row = 0; col = 0;
*clean.nextrow
*	gt(row = row + 1, 15)				:s(return)
*	col = 0;
*clean.nextcell
*	gt(col = col + 1, 15)				:s(clean.nextrow)
*	c = g.board[row,col]
*	ident(new(c))					:s(clean.nextcell)
*	bonus(c) = new(c) =				:(clean.nextcell)
*clean.end
	
	define('display()b,r,c,ch,line')		:(display.end)

*	Display the board on standard output

display
	display.header('board')
display.r
	gt(r = r + 1,15) 				:s(display.finish)
	line = lpad(r,2) '|'
	c = 0
display.c
	gt(c = c + 1,15)				:s(display.margin)
	ch = g.board[r,c]
	b = g.bonus[r,c]
	differ(ch,' ')					:s(display.ch)

*	Here if empty cell, see if there is a bonus to be displayed.

	ne(b,1)						:s(display.b)

*	Here to display empty cell.

	line = line ' -'				:(display.c)
display.b

* 	Here to display bonus.

	ch = (eq(b,2) 'dl', eq(b,3) 'tl', eq(b,4) 'dw', eq(b,5) 'tw')
	line = line ch 					:(display.c)
display.margin
	output = line '|'				:(display.r)
display.ch
	line  = line ' ' ch				:(display.c);* display tile
display.finish
	output =					:(return)
display.end


	define('display.alone()b,r,c,l,line')				:(display.alone.end)

*	Display the board on standard output

display.alone
	display.header('alone')
display.alone.r
	gt(r = r + 1,15) 				:s(display.alone.finish)
	line = lpad(r,2) '|'
	c = 0
display.alone.c
	gt(c = c + 1,15)				:s(display.alone.l)
	l = g.alone[r,c]
	line = line lpad(l,2)		 		:s(display.alone.c)
display.alone.l
	output = line '|'				:(display.alone.r)
display.alone.finish
	output =					:(return)
display.alone.end

	define('display.bonus()b,r,c,l,line')			:(display.bonus.end)

*	Display the board on standard output

display.bonus
	display.header('bonus')
display.bonus.r
	gt(r = r + 1,15) 				:s(display.bonus.finish)
	line = lpad(r,2) '|'
	c = 0
display.bonus.c
	gt(c = c + 1,15)				:s(display.bonus.l)
	l = g.bonus[r,c]
	line = differ(l,' ') line ' ' l 		:s(display.bonus.c)
* Here for blank cell, display.bonus bonus if applicable
	b = g.bonus[r,c]
	eq(b)						:s(display.b)
* 	Here to display bonus
	l = (eq(b,2) 'dl', eq(b,3) 'tl', eq(b,4) 'dw', eq(b,5) 'tw')
	line = line l 					:(display.bonus.c)
display.bonus.b
*	Here to display.bonus empty cell.
	line = line ' -'				:(display.bonus.c)
display.bonus.l
	output = line '|'				:(display.bonus.r)
display.bonus.finish
	output =					:(return)
display.bonus.end

	define('display.header(label)')			:(display.header.end)
display.header
	output = char(9) ucase(label)
	output = '                      1 1 1 1 1 1'
	output = '    1 2 3 4 5 6 7 8 9 0 1 2 3 4 5'	:(return)
display.header.end

	define('display.move(mov)id,count')			:(display.move.end)

*	Display a move.

display.move
	count = count(mov)
	display.move = 'M'
	id = id(mov)
	id = (le(id,15) 'r' lpad(id,2,0), 'c' lpad(id - 15,2,0)) '#' count(mov) ':'
	display.move = (eq(count,1)  	id free(mov)[1] ':' text(mov) ':' points(mov),
.					id free(mov)[1] '..' free(mov)[count] ':' text(mov) ':' points(mov))
							:(return)
display.move.end

	define('display.moves(movs)i,mov')		:(display.moves.end)

*	Display an array of moves.

display.moves
	ident(movs)					:s(return)
	output = '  moves '
display.moves.loop
	mov = movs[i = i + 1,2]			:f(return)
	output = char(9) lpad(i,2) ' ' display.move(mov) :(display.moves.loop)
display.moves.end

	define('display.scores()ara,i')			:(display.scores.end)

*	Display an array of scores.

display.scores
	output = 'display g.scores '
	ara = rsort(g.scores,2)
display.scores.next
	output = ara[i = i + 1,1] ' ' lpad(ara[i,2],6)  :s(display.scores.next)f(return)
display.scores.end

	define('first(line)')				:(first.end)

*	Return index of first blank in line, or fail if none.

first
	ident(line)					:s(freturn)
	line len(1) . c 
	differ(c,' ')					:s(first.1)
	first = 1					:(return)
first.1
	line span(&lcase) . c				:f(freturn)
	first = size(c) + 1
	gt(first,15)					:s(freturn)f(return)
first.end
	
	define('hline(grid,r)')				:(hline.end)

*	Return the horizontal line of a grid corresponding to row r as a string.

hline
	hline = grid[r,1] grid[r,2] grid[r,3] grid[r,4] grid[r,5] 
.		grid[r,6] grid[r,7] grid[r,8] grid[r,9] grid[r,10]
.		grid[r,11] grid[r,12] grid[r,13] grid[r,14] grid[r,15]
							:(return)
hline.end

	define('init.bonus()s,row,col,b,c')		:(init.bonus.end)

*	Initialize the bonus squares for the 15x15 grid, using 1 for double letter,
*	2 for triple letter, 3 for double word, and 4 for triple word.

init.bonus
	g.bonus = array('15,15',+1)
	s = 	'5 0104 3 0107 3 0109 5 0112 2 0203 4 0206 4 0210 2 0213 '
.		'2 0302 2 0305 2 0311 2 0314 5 0401 3 0404 4 0408 3 0412 4 0415 '
.		'2 0503 2 0507 2 0509 2 0513 4 0602 3 0606 3 0610 4 0614 '
.		'3 0701 2 0705 2 0711 4 0715 4 0804 4 0812 3 0901 2 0905 2 0911 3 0915 '
.		'4 1002 3 1006 3 1010 4 1014 2 1103 2 1107 2 1109 2 1113 '
.		'5 1201 3 1204 4 1208 3 1212 5 1215 2 1302 2 1305 2 1311 2 1314 '
.		'5 1403 4 1406 4 1410 2 1413 5 1504 3 1507 3 1509 5 1512 '

init.bonus.1
	s len(1) . b ' ' len(2) . row len(2) . col ' ' =	:f(init.bonus.next)
	g.bonus[+row,+col] = +b					:(init.bonus.1)
init.bonus.next
	g.bonus.lines = lines(g.bonus)				:(return)
init.bonus.end

	define('init.dict(filename,skip)file,i,n,w,s')		:(init.dict.end)

*	Initialize the global dictionary g.dict.

init.dict

	g.dict = array(15)

*	Set hash table sizes according to output of ../study/gendict.sbl

	s  = '1 100 1000 4000 9000 15000 23000 28000 25000 20000 15000 11000 8000 5000 3000 '
init.dict.tbl
	gt(i = i + 1,15)				:s(init.dict.tbl.1)
	s break(' ') . n ' ' = 
	g.dict[i] = table(+n)				:(init.dict.tbl)
init.dict.tbl.1
	i = 0


*	Read in a dictionary from a specified file, with one word per line. If 'skip'
*	is non-zero then that number of lines are skipped before adding the next word.
*	This assists the use of smaller dictionaries for testing.

	filename = ident(filename) '../dict.txt'
	skip = (ident(skip) +1, +skip)

	input(.file,3,filename)				:s(init.dict.in)
	output = 'unable to open input file ' filename	:(freturn)
	n = 0
init.dict.in
	w = file					:f(init.dict.done)
	gt(size(w),15)					:s(init.dict.in)

*	Process plural words, indicated by 'S' at end

	differ(substr(w,size(w),1),'S')			:s(init.dict.w)
	w = substr(w,1,size(w) - 1)
	g.dict[size(w)][w] = +1
	g.dict[size(w) + 1][w 's'] = +1			:(init.dict.in)
init.dict.w
*	output = 'enter ' w ' ' size(w)
	g.dict[size(w)][w] = +1
	eq(skip,1)					:s(init.dict.in)
*	here want to skip over entries in the dictionary (for testing)
	n = skip
init.dict.skip
	w = file					:f(init.dict.done)
	gt(n = n - 1,0)					:s(init.dict.skip)f(init.dict.in)
init.dict.done
	endfile(3)					:(return)
init.dict.end

	define('init.perm(filename)line,ifile,n,k,lines,nread')	:(init.perm.end)

*	Initialize the list of possible permutations from a file.

*PERM
init.perm
	g.permutations = table(100)
	input(.ifile,4, filename)			:s(init.perm.next)
	output = 'unable to open permutation file ' filename 	:(freturn)
init.perm.next
	line = ifile					:f(init.perm.done)
	line break('?') . n '?' break(' ') . k ' ' rem . count :f(init.perm.err)
	ara = array(count)
	ai = 0
init.perm.array
	ara[ai = ai + 1] = ifile			:s(init.perm.array)
	g.permutations[n '?' k] = ara			:(init.perm.next)
init.perm.done
	endfile(4)					:(return)
init.perm.err
	output = 'init.perm error, line ' lines '  '  line :(freturn)
init.perm.end

	define('init.tileset()s,n')			:(init.tileset.end)

* 	Initialize set of tiles, ignoring the 'blank' tiles for now.
*	Initialize value map from letters to value, ignoring ' ' for now

init.tileset
	s = 'a 9 b 2 c 2 d 5 e 13 f 2 g 3 h 4 i 8 j 1 k 1 l 4 m 2 n 5 o 8 p 2 q 1 r 6 s 5 t 7 u 4 v 2 w 2 x 1 y 2 z 1 '
	g.tileset =
init.tileset.1
	s break(' ') . c ' ' break(' ') . n ' ' =	:f(return)
	g.tileset = g.tileset dupl(c,n)			:(init.tileset.1)
init.tileset.end

	define('init.value()s,c')			:(init.value.end)
init.value
	g.value = table(52)
	s = &lcase &ucase

*	Assume value of a tile is one, and correct that below.

init.value.next
*	assume value is 1
	s len(1) . c =					:f(init.value.letters)
	g.value[c] = +1					:(init.value.next)

init.value.letters
	s = 
.	'b 4 c 4 d 2 f 4 g 3 h 3 j 10 k 5 l 2 m 4 n 2 p 4 q 10 u 2 v 5 w 4 x 8 y 3 z 10 '
.	'B 4 C 4 D 2 F 4 G 3 H 3 J 10 K 5 L 2 M 4 N 2 P 4 Q 10 U 2 V 5 W 4 X 8 Y 3 Z 10 '
init.value.update
*	update assumptions for letters with value greater than one.
	s break(' ') . c ' ' break(' ') . v ' ' =	:f(return)
	g.value[c] = +v					:(init.value.update)
init.value.end

	define('insert(mov)text,i,count,free')		:(insert.end)

*	Insert the text of a move into its free list of empty cells in the line of the move.

insert
	insert = unpack(id(mov))
	free = free(mov)
	count = count(mov)
	text = text(mov)
insert.1
	gt(i = i + 1,count)				:(return)
	insert[free[i]] = substr(text,i,1)		:(insert.1)
insert.end

	define('isword(word,words)')			:(isword.end)

*	Words is a map on words. Succeeds if words is defined for the specified word,
*	fails otherwise.
isword
	differ(words[word])				:s(return)f(freturn)

isword.end

	define('last(string)w')				:(last.end)

*	Return index of last space in string, or null if no space in string

last
	last = first(reverse(line))			:f(freturn)
	last = 16 - last				:(return)
last.end

	define('less(str,ch)before,after')		:(less.end)

*	Removes the first instance of character ch in str.

less
	ident(str)					:s(return)
	str break(ch) . before len(1) rem . after	:f(less.1)
	less = before after				:(return)
less.1
	less = ident(substr(s,1,1),ch) substr(s,2)	:s(return)
	less = str					:(return)
less.end

	define('grid(lines,start)i,r,c,line')			:(grid.end)

*	Construct a grid from a sequence of lines beginning at index *start* (1..15 for rows, 16..30 for columns).

grid
	grid = array('15,15',' ')
	gt(start,15)					:(grid.cols)

*	Here to build grid from set of horizontal rows.

	r = 0; i = 0

grid.1
	gt(r = r + 1,15)				:s(return)
	line = lines[r]					:f(grid.3)
	i = 0
grid.2
	grid[r,i = i + 1] = substr(line,i,1)		:(grid.2)
grid.3

*	Here to build the columns from the updated rows.

	c = 0; i = 0
grid.4  
	gt(c = c + 1,15)				:s(return)
	i = 0
grid.5
	grid[i = i + 1,c] = substr(line,i,1)		:(grid.5)
grid.end

	define('lines(grid)i')				:(lines.end)

*	Express the grid as a sequence of lines, with the first 15 consisting of the rows
*	and the last 15 consisting of the columns.

lines
	lines = array(30)
lines.next
	gt(i = i + 1,15)				:s(return)
	lines[i] = hline(grid,i)
	lines[i + 15] = vline(grid,i)			:(lines.next)
lines.end

	define('moves(num,line,rack)alone,nopen,ai,first,max,n,last,nplaces,ptable,mov,nmove')	:(moves.end)

*	Find all the moves that can be made in the line specified by *num*, where  *num* values from 1 .. 30,
*	and *line* has the current content of that line.

moves
	moves = table()
	alone = g.alone.lines[num]

*	Allocate and fill in avail, an array giving the positions of the open cells.

	g.avail = available(line)				:f(moves.done);* fail if no empty cells
	nopen = prototype(g.avail);* number of open cells

*	Prepare for loop, since decrement nopen at start of search at a given empty cell.

	nopen = nopen + 1
	ai = 0

moves.next
*	Here to find all the possible moves starting at the next open cell, first.

	first = g.avail[ai = ai + 1]			:f(moves.done)

	nopen = nopen - 1;* count down since we are accounting for this open cell in this pass through the loop.
	le(nopen)					:s(moves.done)

*	Let max be the most tiles we can play on this line. We can't play more tiles than the number of 
*	blank cells in this line, and we can't play more tiles than we have.

	max = nopen
	max = gt(max,size(rack)) size(rack)
	n = 0

moves.next.n
	gt(n = n + 1,max)				:s(moves.next)

	last = g.avail[ai + n - 1];			:f(moves.fail)

*	Skip this move if all its cells are alone.

	substr(alone, first, last - first + 1) break(' '):f(moves.next.n)

*	Add cell to candidate list, as triple (first cell, last cell,number of cells to play)

	mov = move(num,n,subarray(g.avail,ai,n))
	moves[nmove = nmove + 1] = mov			:(moves.next.n)

moves.done
	display.moves(convert(moves,'array'))
	moves = ident(nmove) 				:s(return)
	moves = convert(moves,'array')			:(return)
moves.doner	
	output = 'move.doner'				:(end)
moves.end

	define('open(tiles)best.score,best.word,n,w,start,key,permi')	:(open.end)

*	Determine best opening move. At least one letter in this move must be in the center square (8,8).
*	The only bonus available is double word, for any word of more than four characters.
*
*	The return value has the form 'm s' where m is the move and s is its score.
*
*	There are seven tiles, so we just try all permutations of length one up to seven.

open
	n = 0;* number of tiles to play
	best = 0;* best score
	start = 8;* assume word will start in column 8
	output = 'open ' tiles

open.1	le(n = n + 1,7)					:f(open.finish)
	kind = size(tiles) '?' n
	perms = g.permutations[kind]
	permi = 0
open.2
*	get next word, check that valid, then see if new high score
	perm = perms[permi = permi + 1]			:f(open.1)
	w = replace(perm,substr('1234567',1,size(tiles)),tiles)
	checkword(w)					:f(open.2)
	checkwords = checkwords + 1
	le(oscore(w),best.score)			:s(open.2)
	best.word = w
	best.score = oscore(w)
	open = lt(size(best.word),6) '0808+' best.word ' ' best.score	:s(open.2)
*	Here if longer open word, move a space to the left
							:(open.2)
open.finish						
	open = '0807+' best.word ' ' best.score		:(return)
open.end

	define('oscore(word)i,c')			:(oscore.end)

*	Compute the score of an initial word, which is always played horizontally starting at the center 
*	square (row=8, column = 8).
oscore
	word len(1) . c =				:f(oscore.finish)
	oscore = oscore + g.value[c]			:(oscore)
oscore.finish
*	Double word score if length greater than four, so bonus at (8,12) is achieved.
	lt(size(word),5)				:s(return)
	oscore = oscore + oscore			:(return)
oscore.end

	define('pack(chars),c,i')			:(pack.end)

*	Pack an array of characters into a line

pack
	pack = 	chars[1] chars[2] chars[3] chars[4] chars[5]
.		chars[6] chars[7] chars[8] chars[9] chars[10]
.		chars[11] chars[12] chars[13] chars[14] chars[15]
pack.end


	define('placeword(r,c,w)ch')			:(placeword.end)


*	Add a word to the board (used for testing)
placeword
	c = c - 1
placeword.1
	w len(1) . ch =					:f(placeword.done)
	g.board[r, c = c + 1] = ch
*	Mark self and adjoining squares as no longer alone
	g.alone[r,c] = ' '    ;* self
	g.alone[r - 1,c] = ' ';* cell to the north
	g.alone[r,c + 1] = ' ';* cell to the east
	g.alone[r,c - 1] = ' ';* cell to the west
	g.alone[r + 1,c] = ' ';* cell to the south
							:(placeword.1)
placeword.done
	g.alone.lines = lines(g.alone)
	g.lines = lines(g.board);* update g.lines so consistent with updated board.
							:(return)
placeword.end

	define('prefix(str,pre)word')			:(prefix.end)
prefix

*	Prefix takes a list of space-separated words str and prefixes each
*	with the string pre.

	str = str ' ';* so each word followed by space
prefix.1
	str break(' ') . word span(' ')  =		:f(return)
	prefixcount = prefixcount + 1
	prefix = add(prefix, pre word)			:(prefix.1)
prefix.end

	define('random(n)')

*	Return integer uniformly distributed in 1,2,...,n. If n=0 returns real uniformly distributed
*	in the interval [0,1].
*	The Algorithm is based in that in section 16.1 of "Algorithms in SNOBOL4," James F. Gimpel, John Wiley and Sons, 1976.

*	Gimpel uses integer here, but need to have real.
	random_var = convert(1,'real')

							:(random.end)
random	random_var = remdr(random_var * 4676, 414971)

	random  = random_var / 414971
	random = ne(n,0) convert(random * n,'integer') + 1
							:(return)
random.end

	define('random_rack()i')			:(random_rack.end)

*	Return random set of seven tiles from the initial set of tiles.
*	This is used for testing.

random_rack
	gt(i = i + 1,7)					:s(return)
	random_rack = random_rack substr(g.tileset,random(size(g.tileset)),1)	:(random_rack)
random_rack.end

	define('score(lines,num)iline,line,word,words,n,start,ci,wi,ch,i,bonus,wscore,double,triple,val')	:(score.end)

*	Compute the score of a move on a given line. All the letters of the move will be in upper case on the board
*	so the score of the move is the sum of the scores of all the words with upper case letters in them, for
*	both rows and columns. This function should only be called for lines which have an upper case letter in
*	them as a result of the move.


*SCORE
score
	score = 0
	iline = lines[num]
	bonusline = g.bonus.lines[num]
	iline break(&ucase)				:f(score.error)
	words = words(iline)				:f(return)
score.word
	start = words[wi = wi + 1,1]			:f(return)
	word = words[wi,2]
	n = size(word)

*	Single letters don't contribute to score since the come from intersecting line.

	eq(size(word),1)				:s(score.word)
	word break(&ucase)				:f(score.word)
	line = substr(iline,start)
	bonusline = substr(g.bonus.lines[i],start);* corresponding part of bonus line
	score = 0; double = 0; triple = 0; i = 0
score.char
	gt(i = i + 1,n) 				:s(score.char.done)
	ch = substr(word,i,1)
	bonus = +substr(bonusline,i,1)
	val = +g.value[ch]
	score = score + val;* always get at least the value of the tile
	eq(bonus,1)					:s(score.char)
	score = (eq(bonus,2) score + val)		:s(score.char);* double letter	
	score = (eq(bonus,3) score + val + val)		:s(score.char);* triple letter

*	Here if not double or triple letter, so just add in the value of the tile

	double = (eq(bonus,4) double + 1)		:s(score.char);* double word
	triple = (eq(bonus,5) triple + 1)		:s(score.char);* triple word
score.char.done
	score = (eq(double,1) score * 2)
	score = (eq(double,2) score * 4)
	score = (eq(triple,1) score * 3)
	score = (eq(triple,2) score * 9)
							:(return)
score.error
	score = 0					:(return)
*	output = 'error scoring line with no new move ' line	:(end)
score.end

	define('subarray(ara,start,len)i')		:(subarray.end)

*	Like substr, but returns the sub-array of *ara* starting at element *start* and
*	consisting of *len* elements

subarray
	subarray = array(len)
subarray.1
	gt(i = i + 1,len)				:s(return)
	subarray[i] = ara[start + i - 1]		:(subarray.1)		
subarray.end

	define('ucase(s)')				:(ucase.end)

*	Convert argument converted to upper case

ucase
	ucase = replace(s,&lcase,&ucase)		:(return)
ucase.end
	
	define('unpack(line),c,i')			:(unpack.end)

*	Unpack the characters of line to array of characters.

unpack
	unpack = array(15)
unpack.1
	line len(1) . c =				:f(return)
	unpack[i = i + 1] = substr(line,i,1)		:(unpack.1)
unpack.end

	define('vline(grid,c)')				:(vline.end)

*	Return the vertical line of a grid corresponding to column c as a string.

vline
	vline = grid[1,c] grid[2,c] grid[3,c] grid[4,c] grid[5,c] 
.		grid[6,c] grid[7,c] grid[8,c] grid[9,c] grid[10,c]
.		grid[11,c] grid[12,c] grid[13,c] grid[14,c] grid[15,c]
	out
							:(return)
vline.end

	define('wordcount(s)i,w')				:(wordcount.end)

*	Return number of words in s, fail if no words

wordcount
	s break(' ')					:f(freturn)
	
	wordcount = 0
wordcount.1
	s break(' ') . w span(' ') =			:f(return)
	wordcount = +wordcount + 1				:(wordcount.1)
wordcount.end

	define('words(s)n,w,pos')					:(words.end)

*	Return array of the words in s, fail if no words.
*	The first entry for an array is the starting index,
*	the second entry is the word itself.

words
	n = wordcount(s)					:f(freturn)
	s = s ' '
	words = table(n)
	pos = 1;* first word has no preceding space.
words.1
*	Replace the blank with ? 
	s break(' ') . w ' ' = 					:f(words.done)
	words[pos] = w					
	pos = pos + size(w) + 1;* set to start of next word
								:(words.1)
words.done
	words = convert(words,'array')				:(return)
words.end
	
	define('find(rack)find,flines,line,movs,movei,mov,perms,perm,score,found)')	:(find.end)

*	Find all the valid moves and their scores given the current board and the indicated rack.
*	For each line, find the set of all possible moves for that line. 
*	Then for each move find all the options (permutations) that can be played from the tileset.
*	For each specific permutation see if the resulting line contains only valid words. 
*	If not, go on to the next permutation.
*	If true, then see if all the lines affected by the move contain only valid words.
*	If not, go on to the next permutation.
*	If so, then add up the scores of all new words created by the move.


*FIND
find
	find = table()
	lines = copy(g.lines)

find.line
	gt(num = num + 1,30)				:s(find.done)
	line = lines[num]
	output = 'find line ' num ' ' line
	movs = moves(num,line,rack)
	ident(movs)					:s(find.line)
	movei = 0
find.move
	mov = movs[movei = movei + 1,2]			:f(find.line)
	perms = g.permutations[size(rack) ? count(mov)]
find.perm
	perms break(' ') . perm ' ' =			:f(find.move)
	tryline(mov,perm,rack)				:f(find.perm)

*	If ok for line, see if ok for all lines

	score = trygrid(mov,perm,rack)			:f(find.perm)
	points(mov) = score				
	find[found = found + 1] = copy(mov)
							:(find.perm)
find.done
	find = (ne(found) convert(find,'array'), '')	:(return)
find.end

	define('tryline(mov,perm,rack)') 		:(tryline.end)
m.

*	Given a move *mov* and a permutation  *perm* to be tried for the move,
* 	apply it and see if the result has only valid words. Fail if this is not the case.

*TRYLINE
tryline
	output = 'try perm ' perm '   rack ' rack

*	Insert the letters from the tileset corresponding to the permutation into the selected blank cells in the line. 
*	The digit '1' selects the first tile, the digit '2' the second, and so on.

	text(mov) = replace(perm,substr('1234567',1,size(rack)),rack)
	line = pack(insert(mov));* INSERT
	checkline(line)					:f(freturn)
	tryline = copy(mov)				:(return)

tryline.end

	define('trygrid(mov)i,line,lines,grid,first,last`') :(trygrid.end)

*	Given that move *mov* is valid for its line, see that every other line affected by the move contains
*	only valid words. If this is so, then compute the score of the move and return that as the result, otherwise
*	the call fails.

trygrid

*	The i-th character in line of a move in a row (column) is also in the i-th character in
*	the corresonding row (column). 

*	Rebuild the grid using the new line, and then rebuild the lines array to propogate 
*	all changes to the necessary lines.

	lines = copy(g.lines)
	line = lines[id(mov)]
	lines[id(mov)] = pack(line,insert(mov))
	grid = grid(lines)
	lines = lines(grid)

*	See if the move is valid by looking at all affected lines.

trygrid.next
	line = lines[i = i + 1]				:f(trygrid.valid)
	checkline(line)					:(trygrid.next)
trygrid.valid

*	Here after confirming all lines are still valid, so need to compute the score.

*	In order to determine which words on the board would be formed by making this move,
*	rebuild the board but with the new tiles in uppercase. This way, a word is new if and only if
*	it contains an upper case character. The score is then the sum over all the lines of the scores of
*	the words containing an upper-case character. At most one word in any line of the new grid with
*	contain an upper-case character.

	text(mov)  = ucase(text(mov))
	line = lines[id(mov)]
	line = pack(line,insert(mov));
	grid = grid(lines)
	lines = lines(grid)
	i = 0

trygrid.score
	line = grid(i = i + 1)				:f(return)
	trygrid = trygrid + score(lines[i])		:(trygrid.score)
							:(return)
							:(return)
trygrid.end

