* Copyright (c) 2017 dave shields

* This file is part of the fribble project: http://github.com/daveshields/fribble.
*
*	Fribble is free software: you can redistribute it and/or modify
*	it under the terms of the gnu general public license as published by
*	the free software foundation, either version 2 of the license, or
*	(at your option) any later version.
*
*	Fribble is distributed in the hope that it will be useful,
*	but without any warranty; without even the implied warranty of
*	merchantability or fitness for a particular purpose.  See the
*	gnu general public license for more details.
*
*	You should have received a copy of the gnu general public license
*	along with fribble.  If not, see <http://www.gnu.org/licenses/>.
*

-include "lib.sbl"

*	Play a game of fribble.  Usage:  

*		sbl fribble.sbl -umode

*	where mode is 'auto', 'self' or 'team'.

*	The program can now run in several modes:

*	f.mode = 1 for solo mode, where you play against fribble.
*	f.mode = 2 for self mode, where fribble moves for both players.
*	f.mode = 3 for team mode, where you and fribble work as team to play another player.
	
	f.mode.solo = 1
	f.mode.auto = 2
	f.mode.team = 3


	&stlimit = -1
	&anchor = &trim = 1

	init()

	out('initial tiles ' g.tiles)

	options = host(0) ' '
	options '-u' =
*	output = 'host <' options '>'

options.loop

	options break(' ') . opt ' ' =			:f(options.loop.done)

*	Only process -u options. 

	opt '-u' =					:f(options.loop)
	
	out('option ' opt)

	f.mode = ident(opt,'-auto') f.mode.auto		:s(options.loop)
	f.mode = ident(opt,'-solo') f.mode.solo		:s(options.loop)
	f.mode = ident(opt,'-team') f.mode.team		:s(options.loop)
							:(options.loop)
options.loop.done



	eq(f.mode,f.mode.solo)				:s(setup.solo)
	eq(f.mode,f.mode.auto)				:s(setup.auto)
	eq(f.mode,f.mode.team)				:s(setup.team)

							:(setup.auto);* default
setup.auto

*	Setup for mode 'auto'.

*	In auto mode, fribble plays against itself.

*	Fribble makes the moves for both players, each with kind player.kind.auto. 

	g.one = player(1,'Fribble A',	player.kind.auto)
	g.two = player(2,'Fribble B',	player.kind.auto)

*	Fribble manages the tiles for both players.

	g.tilemanager = 1
							:(setup.done)

setup.solo

*	Setup for mode 'solo'. 

*	In solo mode, you play against fribble. 

*	You are player one, of kind player.kind.solo. You make your own moves.
*	Fribble is player two, of kind player.kind.auto.

	g.one = player(1,'You',		player.kind.solo)
	g.two = player(2,'Fribble',	player.kind.auto)

*	Fribble manages the tiles for both players.

	g.tilemanager = 1
							:(setup.done)
setup.team

*	Setup for mode 'team'

*	In team mode, you work with fribble to play a foe, reporting the foe's moves
*	to fribble and playing the move fribble then suggests against the foe.

*	You are player one, of kind player.kind.team.
*	The foe is player two, of kind player.kind.foe.

*	You manage the tiles, entering your tiles as dealt by wwf before each move.
*	(The foe's tiles are unknown, as all that matters is the move they make.)

*	I wrote this program because a friend named Phil kept beating me -- badly --
*	playing wwf.

	g.one = player(1,'Phil DeFoe',	player.kind.foe);* Hi Phil!

	g.two = player(2,'You',		player.kind.team)
	g.tilemanager =
							:(setup.done)
setup.done

*	Initialize log file and write tileset description

	eq(g.log)					:s(setup.nolog)
	lfn = datedash() '.fri';* log file name
	output(.g.logfile,g.logfile.channel,lfn)	:s(setup.log)
	out('unable to open log file ' lfn)		:(game.nolog)

setup.log


	log('file ' lfn)
	log( 'mode ' 	mode)
	log.tiles()
	log.player(1)
	log.player(2)


	g.players[1] = g.one; g.players[2] = g.two

*	out('g.one ' show.player(1))
*	out('g.two ' show.player(2))

	g.turn = g.lastmove = total(g.one) = total(g.two) = 0
	
*	Set f.trace to trace fribble.

	f.trace = 1
	f.trace = 0

	ident(g.tilemanager)				:s(setup.game)

*	Program manages the tiles, so deal initial tiles.
	
	rack(g.one) = take(7)
	rack(g.two) = take(7)

setup.game

	game(f.mode)

end
