* Copyright (c) 2017 dave shields

-include "lib.sbl"

	&stlimit = -1
	&anchor = &trim = 1
	init()

main.team

*	Make us the home team

	home = player('Dave')
	away = player('Solo Wwf')
	g.one = home
	g.two = away

*	When playing solo, home (we) make the first move.

	match(home,away,home)				:s(main.match.done)f(main.match.fail)
main.match.fail
	output = 'failed match'				:(main.match.done)
main.match.done
	output = 'match over'
main.match.over
	counters()
end
	define('m(id,pos,text)f,fi')			:(m.end)

*	Create move with given id, starting position and text.
*	The move occupies consecutive cells.

m

*	Build free cell list.

	f = array(size(text))
m.f
	f[fi = fi + 1] = pos + (fi -1)			:s(m.f)

	m = move(id,size(text),f,text)			:(return)
m.end

	define('mf(id,pos,f,text)f,fi,pos,free')	:(mf.end)

*	Define move from id, pos, list of free cells, and text.
*	*f* is a comma-separated list of positions

mf
	f = f ',';* to assist loop
	free = array(size(text))
mf.l
	f break(',') . pos = 				:f(mf.m)
	free[fi = fi + 1] pos				:(mf.l)
mf.m
	mf = move(id,size(text),free,text)		:(return)
mf.end

	define('a(move)')				:(a.end)

*	Make move for away team.

	makemove(away,move)				:s(return)f(freturn)
a.end

	define('h(move)')				:(h.end)

*	Make move for home team.

h
	makemove(home,move)				:s(return)f(freturn)
h.end

	define('r(tiles)')					:(r.end)

*	Enter rack of home team.

r.end

