* Copyright (c) 2017 dave shields

-include "lib.sbl"

	define('game(one,two)player,opn,move,players,i,li,offset,open.word,open.score,n,tiles,moves,li,passed,board') :(game.end)

*	Play a game of fribble. *one* and *two* are players. *max* is the maximum number of moves.

*GAME*
game
	players = array(2)
	players[1] = g.one
	players[2] = g.two
game.round
	i = 0
game.turn
	player = players[i = i + 1]				:f(game.round)

	g.turn = g.turn + 1
	output = ne(g.turnlimit) gt(g.turn,g.turnlimit) 'Game over -- too many turns (' g.turnlimit ').' :s(game.over)
	output = gt(g.turn,g.lastmove + 5) 'Game over - too many turns with no move.' :s(game.over)

	eq(g.trace,g.turn) tracer()

	output = ne(g.maxmoves) gt(g.turn,g.maxmoves) 'Game over -  too many turns.'  :s(game.over)

	output = 'Move ' g.turn ' for player ' name(player) ', with tiles ' show.tiles(rack(player),'A') '.'
	output = ne(g.showscore) 'B 4 C 4 D 2 F 4 G 3 H 3 J 10 K 5 L 2 M 4 N 2 P 4 Q 10 U 2 V 5 W 4 X 8 Y 3 Z 10 '

	move = ident(fribble(player)) get()			:s(game.move)
	move = differ(fribble(player)) (eq(g.turn,1) start(player), find(player,limit(player))) :s(game.move)
*	move = (eq(g.turn,1) start(player), find(player,limit(player))) :s(game.move)
								:(game.fail)		
game.move
	makemove(player,move)
	show.play(move)

*	Game over if no more tiles.

	output = eq(size(g.tiles)) 'Game over - no more tiles. '		:s(game.over)
	getrack(player,move)					:(game.turn)

game.fail

*	Here if no move found.

	output = 'No move found.'

*	Here if no move found, in which case the return value is a set of swapped tiles. If *move* is null, then pass.

	differ(move)					:s(game.swap)
	passed = passed + 1
	output = gt(passed,6) ' Too many passed moves.'	:s(game.over)
	output = 'Player ' name(player) ' passes.'		:(game.turn)
	
game.swap
	rack(player) = swap(player,3)
	output = 'Player ' name(player) ' swapped tiles.'	
	output = 'Player ' name(player) ' now has tiles ' show.tiles(rack(player)) :(game.turn)
game.over						
	endgame()					:(return)
game.end

*	Have fribble play itself.

	&stlimit = -1
	&anchor = &trim = 1

	init()

	one = player(1,'Fribble One',1)
	two = player(2,'Fribble Two',1)
	g.one = one
	g.two = two
	total(g.one) = total(g.two) = 0
	rack(g.one) = take(7)
	rack(g.two) = take(7)

	g.turn = g.lastmove = 0
	g.turnlimit = 

	g.trace = 16
	game()							:(end)
end
