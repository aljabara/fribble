* Copyright (c) 2017 dave shields

-include "lib.sbl"

	define('turn(pid)')						:(turn.end)

*	Play a turn in a game.

*	Steps are

*	1.	Replenish tiles before making the move if managing the tiles by hand.

*	2.	Find or enter the move to be played.

*	3.	Make the move by updating the data structures, scores, etc.

*	4.	If not managing the tiles by hand, use fribble to update the rack.

turn
	player = g.players[pid]

*	Replenish tiles before making the move. This is needed if 
*	managing the player's tiles manually.

	fribble(player)							:s(turn.move)

	rack(player) = replenish(pid)
	

turn.move

*	2.	Find or enter the move to be played.

*	Here to pick the next move.

	ident(fribble(player))						:s(turn.move.manual)

*	Here to have fribble determine the move

	move = find(pid,move)						:s(turn.move)f(turn.fail)

turn.move.manual

*	Here to enter the move manually

turn.manual

turn.manual.in
	out('enter  move')
	line = terminal						:f(end)
	move = eval(line)					:f(turn.manual.error)
	ident(datatype(move),'move')				:s(turn.valid)
	out('need to enter a move')				:(turn.manual)


turn.validate

*	See if move is valid, except no test needed for initial move.

	eq(g.turn,1)						:s(turn.move)
	valid(move)						:s(turn.move)

	out('invalid move - try again')				:(turn.manual.in)

turn.manual.error
	out('eval error ' &errtext)				:(turn.manual)

turn.make

*	3.	Make the move by updating the data structures, scores, etc.

	points(move) = scoremove(move)
	show.play(makemove(pid,move))

turn.replenish

*	4.	Replenish the tiles if managing the tiles automatically.


*	Replenish tiles if necessary. If doing this manually, don't do it here,
*	but at start of next turn.

	ident(fribble(player))					:s(turn.done)


*	Here to update rack when fribble is managing the tiles.
*	Remove tiles played on move and then replenish the rack.

	rack(player) = less(rack(player), lcase(text(move)))
	rack(player) = replenish(pid)			

turn.done
								:(return)
turn.end 

	define('game(mode)players,player,opn,move,i,li,offset,open.word,open.score,n,tiles,moves,li,passed,board') :(game.end)

*	Play a game of fribble. *max* is the maximum number of moves.
*	Mode is one to let you play against fribble, two to let fribble play itself.

*GAME*
game

	pid = 2;* set to two so will become one when loop first entered
game.turn
	pid = (eq(pid,1) 2, 1)
	player = g.players[pid]

	g.turn = g.turn + 1

	out(ne(g.turnlimit) gt(g.turn,g.turnlimit) 
.			'Game over -- too many turns (' g.turnlimit ').') :s(game.over)
	out(gt(g.turn,g.lastmove + 5) 
.			'Game over - too many turns with no move.') :s(game.over)
	out(ne(g.maxmoves) gt(g.turn,g.maxmoves) 
.			'Game over -  too many turns.')  :s(game.over)

	eq(g.trace,g.turn) traceon()


	out('Move ' g.turn ' for player ' name(player) ', with tiles ' show.tiles(rack(player),'A') '.')
	out(ne(g.showscore) 'B 4 C 4 D 2 F 4 G 3 H 3 J 10 K 5 L 2 M 4 N 2 P 4 Q 10 U 2 V 5 W 4 X 8 Y 3 Z 10 ')


	turn(pid)

game.fail

*	Here if no move found.

	out('No move found.')

*	Here if no move found, in which case the return value is a set of swapped tiles. If *move* is null, then pass.

	differ(move)					:s(game.swap)
	passed = passed + 1
	out(gt(passed,6) ' Too many passed moves.')	:s(game.over)
	out('Player ' name(player) ' passes.')		:(game.turn)
	
game.swap
	rack(player) = swap(player,3)
	out('Player ' name(player) ' swapped tiles.')
	out('Player ' name(player) ' now has tiles ' show.tiles(rack(player))) :(game.turn)
game.over						
	endgame()					:(return)
game.end

*	Have fribble play itself.

	&stlimit = -1
	&anchor = &trim = 1

	init()


*	The program can now run in two modes.
*	s.mode = 1 for solo mode, where you play against fribble.
*	s.mode = 2 for self mode, where fribble moves for both players.
	
	s.mode = 2
	s.mode = 1


	options = host(0) ' '
*	output = 'host <' options '>'

options.loop
	options break(' ') . opt ' ' =			:f(options.loop.done)
	output = 'option ' opt
	s.mode = ident(opt,'self') 2			:s(options.loop)
	s.mode = ident(opt,'solo') 1			:s(options.loop)
	output = 'unknown option ' opt
							:(options.loop)
options.loop.done


	eq(s.mode,2)					:s(setup.2)

*	Setup for mode 1
	g.one = player(1,'You')
	g.two = player(2,'Fribble',1)
							:s(setup.done)
setup.2
	g.one = player(1,'Fribble I',1)
	g.two = player(2,'Fribble II',1)
setup.done
	g.players[1] = g.one; g.players[2] = g.two

*	Program manages the racks.

	g.dealer = 1
	rack(g.one) = take(7)
	rack(g.two) = take(7)

	g.turn = g.lastmove = total(g.one) = total(g.two) = 0
	g.turnlimit = 

*	g.trace = 22
*	eq(g.turn,22) traceon()
*	g.showscore = eq(g.turn,22) 1
*	eq(g.turn,23) traceoff()
*	g.showscore = eq(g.turn,23) 0

	game(s.mode)							:(end)
end
