    define('shell()ops,key,op')                         :(shell.def.end)

*   Simple 'shell' for fribble.

*   Read commands from terminal and execute them.
*   This is meant mainly for debugging, testing
*   and as a way to learn how fribble operates.

shell

    out('entered shell')
*   s.ok is set to one if last 'eval' command succeeded, zero if it failed.

    s.ok = 0

*   s.move is last move entered in shell

    s.move =

*   s.ops is the list of shell commands.

    s.ops =
.       'board clear eval find help init letters next move pass play quit '
.       'remove replay score search start tiles valid '

*   s.opabbrev maps abbreviated input to corresponding shell.
*   You need specify only first one or more characters
*   in the operation name.

    s.opabbrev = table(100)

    s.letters = &lcase &ucase

*   s.replay is set to read commands from file 'term' before
*   asking for key board input.

    s.replay =

*   s.v is set to value of last 'eval' operation.

*   Initialize s.optable to acceptable abbreviations for shell
*   operations.  Acceptable abbreviations consist of the initial
*   two or more characters of the operation, up to the
*   full command name itself.


    ops = s.ops

shell.setup.next

    ops break(' ') . op ' ' =                           :f(shell.setup.end)
    key = op
    s.opabbrev[substr(key,1,1)] = op
shell.setup.op

    s.opabbrev[key] = op
    key = substr(key,1,size(key) - 1)                   :f(shell.setup.next)
    gt(size(key),1)                                     :s(shell.setup.op)f(shell.setup.next)
shell.setup.end

    tab = char(9)
    out('starting shell')

*   Shell main command loop.

shell.loop

    out('starting replay')
    replay('keyin')                                     :(end)
    out('enter shell loop')                             :(end)
    ident(s.replay)                                     :s(shell.term)
    linein = termfile                                   :s(shell.line)
    linein 'q'                                          :s(shell.loop)
    s.replay =
    endfile(3)
    output(.termfile,3,'term[-a]')

shell.term

    out('op?')
    linein = terminal ' '                               :f(shell.end)

shell.line

    termfile = differ(termfile) linein;* save line
*   out('linein =' linein '.')
    linein span(s.letters) . opin span(' ') rem . operand
.                                                       :s(shell.loop.ok)
    operand = trim(operand)
    out('fail opin =' opin ' operand=' operand '.')     :(shell.loop)

shell.loop.ok

    opin = lcase(opin)
    op = s.opabbrev[opin]
    out('op ' opin ' operand ' operand '.')
*   out('op abbrev =' op)

    differ(op)                                          :s(shell.op)
    out('unknown op: ' op)                              :(shell.loop)

shell.op                                                :($('shell.' op))

shell.board

    show.board(g.board)                                 :s(loop)

shell.clear

*   Clear the board
    g.board = array('15,15',' ')                        :(shell.loop)

shell.end

    out('shell end of input - bye')                     :(end)

shell.eval

    out('evaluating ' operand)
    s.v = eval(operand)                                 :s(shell.eval.succeed)f(shell.eval.fail)

shell.eval.succeed

    s.ok = 1                                            :(shell.loop)

shell.eval.fail

    out('eval failed, ' &errtext)
    s.ok = 0                                            :(shell.loop)

shell.find

*   Use find to find best move given current tiles for Player 1.

    s.move = find(1,g.turn)
    show.move(s.move)                                   :(shell.loop)

shell.game

*   Enter (or leave) game mode, if argument is 'on' ('off').

    s.game = (ident(substr(operand,2,1),'y') 1, 0)
                                                        :(shell.loop)

shell.help

    out(rpad('board',14) 'show board')
    out(rpad('clear',14) 'clear board')
    out(rpad('eval' ,14) 'evaluation expression')
    out(rpad('help' ,14) 'help')
    out(rpad('init' ,14) 're-initialize global variable')
    out(rpad('letters',14) 'show values of letters')
    out(rpad('move' ,14) 'enter move')
    out(rpad('play' ,14) 'play last move')
    out(rpad('quit' ,14) 'exit shell')
    out(rpad('remove' ,14) 'remove (undo) last move played')
    out(rpad('score' ,14) 'score last move entered')
    out(rpad('search' ,14) 'search dictionary for matching words')
    out(rpad('start' ,14) 'make starting move')
    out(rpad('rack tiles',14) 'set rack to tiles, default "fribble"')
    out(rpad('valid' ,14) 'validate move')
                                                        :(shell.loop)
shell.init

    init()                                              :(shell.loop)

shell.letters

    out(    'B 4 C 4 D 2 F 4 G 3 H 3 J 10 K 5 L 2 M 4 '
.               'N 2 P 4 Q 10 U 2 V 5 W 4 X 8 Y 3 Z 10 ')
                                                        :(shell.loop)
shell.move

*   Get move, assume user knows about 'mf' and 'm' functions.

    s.move = eval(operand)
    out('Last move now ' show.move(s.move))             :(shell.loop)

shell.next

*   When not in game mode, next is a no-op.
*   When in game mode, next increments the player id; if the
*   resulting player has the fribble attribute then a move is made
*   on that player's behalf, and another next command is executed.

    ident(s.game)                                       :s(shell.loop)

    g.turn = g.turn + 1
    g.pid = (eq(g.pid,1) 2, 1)

*   See if player has 'fribble' attribute.

    ident(fribble(g.players[g.pid]))                    :s(shell.loop)

    s.move = (eq(g.turn,1) start(g.pid), find(g.pid))
    ident(s.move) out('no move found, so no move made') :(shell.loop)

    points(s.move) = scoremove(s.move)
    show.play(makemove(g.pid,s.move))
    replenish(g.pid)
                                                        :(shell.loop)
                                                        :(shell.loop)

shell.pass

*   Pass from making a move. This is typically used when the
*   player with pid=1 does not want to make the first move.

    out('Player ' pid ' passes.')
    g.turn = g.turn + 1
                                                        :(shell.loop)

shell.play

*   Play last move entered.

    points(s.move) = scoremove(s.move)
    makemove(g.pid,s.move)
    show.play(s.move)
                                                        :(shell.loop)
shell.quit

    out('exiting')                                      :(end)

shell.remove

    out('remove not yet implemented')                   :(shell.loop)

*   Remove (undo) last move played, by setting its free cells to
*   unused

                                                        :(shell.loop)
shell.replay.

*   Replay input saved in 'term' from prior run. To main user
*   confidence in our programming skills, don't replay 'quit' op.

    replay('keyin')
    s.replay = 1
    input(.termfile,3,'term')
                                                        :(shell.loop)
shell.score

*   Show score computation for last move entered.

    g.showscore = 1
    out('Scoring ' show.move(s.move))
    clines(s.move,1)
    show.clines()
    score = scoremove(s.move)
    points(move) = score
    g.showscore = 0
    out('Move ' show.move(move)
.                       ' scores ' score ' points.')    :(shell.loop)


shell.scoremove

*   g.showscore = 1
    points(move) = findscore()
    out('move is worth ' points(s.move) ' points.')
                                                        :(shell.loop)
    out('do you want to make this move (y or ENTER for yes,'
.                                       ' no otherwise)?')
    ans = terminal                                      :f(shell.eod)
    ident(ans)                                          :s(shell.moveon)
    ident(ans,'y')                                      :s(shell.moveon)
                                                        :(shell.you.move)

shell.search

*   Search dictionary for matching words

    out('search not yet implemented')

shell.start

*   Make starting move using current tiles, default to 'fribble'

    rack(g.players[1]) = ident(rack(g.players[1])) 'fribble'
    s.move = start(1,1)

*   Merge to make the move.
                                                        :(shell.play)

shell.tiles

*   Get rack from operand.

    tiles = operand
    gt(size(tiles,7)) out('truncating to seven tiles')
    tiles = gt(size(tiles,7)) substr(tiles,1,7)
    rack(g.players[1]) = tiles
    out('rack now ' tiles)
                                                        :(shell.loop)

shell.validmove

*   show.move(move)
    out((validmove(move) ' valid move','invalid move')) :(shell.loop)

shell.moveon

    makemove(g.pid,s.move)
    show.play(move)
                                                        :(shell.loop)
shell.eof

    out('end of input - bye')                           :(return)

shell.def.end
