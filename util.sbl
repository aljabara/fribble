
* This software is licensed under the MIT License, contained in the file LICENSE.

* Copyright (c) 2016 dave shields

*	Utility functions

	define('add(str,word)')				:(add.end)

*	add word to string str, prefixing with a space if str is not null.
*	this aids in building list of words separated by spaces.

add
	add = ident(str) word				:s(return)
	add = str ' ' word				:(return)
add.end

	define('backwords(dict)ara,key,val,i')	:(backwords.end)

*	use dictionary dict to build dictionary with the words reversed.

backwords
	ara = convert(dict,'array')
	backwords = table(200000)
	
backwards.1
	key = ara[i = i + 1,1]				:f(return)
	val = ara[i,2]
	backwords[key] = reverse(val)			:(backwords.1)
backwords.end

	define('getcolumns(rows),cline,ci,ri')		:(getcolumns.end)

getcolumns
	ri = ci = 0
	getcolumns = array(15)
getcolumns.c
*	compute column i
	gt(ci = ci + 1,15)				:s(return)
	cline =
	ri = 0
getcolumns.r
	gt(ri = ri + 1,15)				:s(getcolumns.d)
	cline = cline substr(rows[ri],ci,1)		:(getcolumns.r)
getcolumns.d
	getcolumns[ci] = cline				:(getcolumns.c)
getcolumns.end

	define('getwords(filename)file,this,word')	:(getwords.end)
getwords

* Convert dictionary to a single string of getwords, combining getwords
* into strings of 1000 characters before concatenating to build
* single string.

	getwords =
	this = 
	input(.file,3,filename)				:s(getwords.in)
	output = 'unable to open input file ' filename	:(feturn)
getwords.in
	word = file					:f(getwords.done)
	this = add(this,word)
	le(size(this),1000)				:s(getwords.in)
	getwords = add(getwords,this)
	this =						:(getwords.in)
							:(getwords.in)
getwords.done					
*	add in remaining words
	getwords = differ(this) add(getwords,this)
	endfile(3)					:(return)
getwords.end

	define('getdict(filename)file,n,word')		:(getdict.end)
getdict

* Convert dictionary to a table.
	getdict = table(20000,,0)
	input(.file,3,filename)				:s(getdict.in)
	output = 'unable to open input file ' filename	:(feturn)
getdict.in
	n = n + 1
	getdict[file] = 1				:s(getdict.in)
	output = 'word count ' n
	endfile(3)					:(return)
getdict.end

	define('initboards(),board,i,j')		:(initboards.end)
initboards
	initboards =array('1:15,1:15')
	i = 0
initboards.i
	le(i = i + 1,15)				:f(initboards.done)
	j = 0
initboards.j
	le(j = j + 1,15)				:f(initboards.i)
	initboards[i,j] = ' '				:(initboards.j)
							:(return)
initboards.end

	define('isword(word)')				:(isword.end)
isword
	differ(words[word])				:s(return)f(freturn)
isword.end

	define('less(str,ch)before,after')		:(less.end)
*	remove the first instance of character ch in str.
less
	ident(str)					:s(return)
	str break(ch) . before len(1) rem . after	:f(less.1) 
	less = before after				:(return)
less.1
	less = ident(substr(s,1,1),ch) substr(s,2)	:s(return)
	less = str					:(return)
less.end
	
	define('prefix(str,pre)word')			:(prefix.end)
prefix

*	prefix takes a list of space-separated words str and prefixes each
*	with the string pre.


	str = str ' ';* so each word followed by space
prefix.1
	str break(' ') . word span(' ')  =		:f(return)
	prefix = add(prefix, pre word)			:(prefix.1)
prefix.end

	define('row(i)')		:(row.end)
*	return contents of row as a string
row
	row = 	board[i,1] board[i,2] board[i,3] board[i,4] board[i,5]
.		board[i,6] board[i,7] board[i,8] board[i,9] board[i,10]
.		board[i,11] board[i,12] board[i,13] board[i,14] board[i,15]
						:(return)
row.end

	define('words(s)i')				:(words.end)
*	return number of space-separated words in s
words
	s = s  ' '
	words = 0
words.1	
	s break(' ') ' ' =				:f(return)
	words = words + 1				:(words.1)
words.end

