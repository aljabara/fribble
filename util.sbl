* This software is licensed under the MIT License, contained in the file LICENSE.

* Copyright (c) 2016 dave shields

*	Utility functions

	define('add(str,word)')				:(add.end)

*	add word to string str, prefixing with a space if str is not null.
*	this aids in building list of words separated by spaces.

add
	add = ident(str) word				:s(return)
	add = str ' ' word				:(return)
add.end

	define('backwords(dict)ara,key,val,i')	:(backwords.end)

*	use dictionary dict to build dictionary with the words reversed.

backwords
	ara = convert(dict,'array')
*	backwords = table(20000)
	backwords = table()

	
backwards.1
	key = ara[i = i + 1,1]				:f(return)
	val = ara[i,2]
	backwords[key] = reverse(val)			:(backwords.1)
backwords.end

	define('getrows(board)')			:(getrows.end)
getrows
	getrows = array(7)
	rline = 
getrows.r
	ri = ri + 1
	gt(ri,15)					:s(return)
	line = 
	ci = 0
getrows.c
	getrows[ri, ci = ci + 1] = ' '			:f(return)
getrows.end
	
*	define('getcolumns(rows),cline,ci,ri')		:(getcolumns.end)
*
*getcolumns
*	ri = ci = 0
*	getcolumns = array(15)
*getcolumns.c
**	compute column i
*	gt(ci = ci + 1,15)				:s(return)
*	cline =
*	ri = 0
*getcolumns.r
*	gt(ri = ri + 1,15)				:s(getcolumns.d)
*	cline = cline substr(rows[ri],ci,1)		:(getcolumns.r)
*getcolumns.d
*	getcolumns[ci] = cline				:(getcolumns.c)
*getcolumns.end

	define('getwords(filename)file,this,word')	:(getwords.end)
getwords

* Convert dictionary to a single string of getwords, combining getwords
* into strings of 1000 characters before concatenating to build
* single string.

	getwords =
	this = 
	input(.file,3,filename)				:s(getwords.in)
	output = 'unable to open input file ' filename	:(feturn)
getwords.in
	word = file					:f(getwords.done)
	this = add(this,word)
	le(size(this),1000)				:s(getwords.in)
	getwords = add(getwords,this)
	this =						:(getwords.in)
							:(getwords.in)
getwords.done					
*	add in remaining words
	getwords = differ(this) add(getwords,this)
	endfile(3)					:(return)
getwords.end


	define('init(dictfile,skip),i,s,t')		:(init.end)

*	Initialize global variables, each with name starting with 'g.'
*	These variables should NEVER be altered once initialized

init

* Initialize set of tiles.

	
* 	ignoring two blanks for now

	s = 'a 9 b 2 c 2 d 5 e 13 f 2 g 3 h 4 i 8 j 1 k 1 l 4 m 2 n 5 o 8 p 2 q 1 r 6 s 5 t 7 u 4 v 2 w 2 x 1 y 2 z 1 '
	g.tileset =
init.1
	s break(' ') . c ' ' break(' ') . n ' ' =	:f(init.2)
	g.tileset = g.tileset new dupl(c,+n)		:(init.1)
init.2

*	initialize the bonus squares for the 15x15 grid, using 1 for double letter, 
*	2 for triple letter, 3 for double word, and 4 for triple word.

	g.dl = table()
	g.tl = table()
	g.dw = table()
	g.tw = table()
	g.bonus = table()

	s =     '1 0203 1 0212 1 0302 1 0305 1 0311 1 0312 1 0314 1 0503 1 0613 1 0705 1 0711 '
.		'1 0905 1 0911 1 1103 1 1109 1 1113 1 1302 1 1305 1 1311 1 1314 1 1403 1 1413 '
.		'2 0107 2 0109 2 0404 2 0412 2 0606 2 0610 2 0701 2 0715 2 0901 2 0915 2 1006 '
.               '2 1010 2 1304 2 1312 2 1507 2 1509 '
.		'3 0206 3 0210 3 0408 3 0602 3 0614 3 0804 3 0812 3 1002 3 1014 3 1208 3 1406 3 1410 '
.		'4 0104 4 0112 4 0401 4 0415 4 1101 4 1115 4 1504 4 1512 '
init.3
	
	s len(1) . n ' ' len(2) . r len(2) . c ' ' =	:f(init.3.done)
	n = +n
	t = lpad(r,2,'0') lpad(c,2,'0')
	g.bonus[+t] = n					:(init.3)
	eq(n, 1)					:f(init.3.2)
	g.dl[+t] = 1					:(init.3.done)
init.3.2
	eq(n, 2)					:f(init.3.3)
	g.tl[+t] = 1					:(init.3.done)
init.3.3
	eq(n,3)						:f(init.3.4)
	g.dw[+t] = 1					:(init.3.done)
init.3.4
	g.tw[+t] = 1					:(init.3.done)
init.3.done
	
*	initialize value map from letters to value, ignoring ' ' for now
	g.value = table(26)
	s = &lcase
init.4
*	assume value is 1
	s len(1) . c =					:f(init.5)
	g.value[c] = +1					:(init.4)
init.5
*	g.value[' '] = 1
*	update assumptions for letters with value greater than one.
	g.value['d'] = g.value['l'] = g.value['m'] = g.value['p'] = g.value['w'] =  +2
	g.value['g'] = g.value['h'] = g.value['y'] = +3
	g.value['b'] = g.value['c'] = g.value['m'] = g.value['p'] = g.value['w'] = +4
	g.value['k'] = g.value['v'] = +5
	g.value['x'] = +8
	g.value['j'] = g.value['q'] = g.value['z'] = 10

	g.dict = initdict(dictfile,skip)
	
							:(return)
init.end

	define('initdict(filename,skip)file,n,word,s')	

*	g.wwf is list of words not in enable dictionary but known to be used by wwf.

	g.wwf = 'qi brr '

							:(initdict.end)
initdict

* Convert dictionary to a table, using every 'skip' entries.

	skip = (ident(skip) +1, +skip)
	initdict = table(200000)

*	add words from g.wwf list to dictionary

	s = g.wwf
initdict.wwf.1
	s break(' ') . word ' ' =			:f(initdict.wwf.2)
	initdict[word] = +1				:(initdict.wwf.1)
initdict.wwf.2
	
	filename = ident(filename) 'enable1.txt'
	input(.file,3,filename)				:s(initdict.in)
	output = 'unable to open input file ' filename	:(freturn)
	n = 0
initdict.in
	word = file					:f(initdict.done)
	gt(size(word),15)				:s(initdict.in)
	initdict[word] = +1				
	eq(skip,1)					:s(initdict.in)
*	here want to skip over entries in the dictionary (for testing)
	n = skip
initdict.skip
	word = file					:f(initdict.done)
	gt(n = n - 1,0)					:s(initdict.skip)f(initdict.in)
initdict.done
	endfile(3)					:(return)
initdict.end

	define('isword(word,words)')			:(isword.end)
isword
	differ(words[word])				:s(return)f(freturn)
isword.end

	define('less(str,ch)before,after')		:(less.end)
*	remove the first instance of character ch in str.
less
	ident(str)					:s(return)
	str break(ch) . before len(1) rem . after	:f(less.1) 
	less = before after				:(return)
less.1
	less = ident(substr(s,1,1),ch) substr(s,2)	:s(return)
	less = str					:(return)
less.end
	
	define('perm(s,p)c,n,i,dist,t')				:(perm.end)

*	perm(s,d) returns all the permutations from string s
*	with length p, as a list of words separated by spaces.

perm
*	build perm as list of entries separated by space. Will
*	eliminate extra space at the end before returning.


perm.dist.1
	n = +size(s)
	eq(p,0)							:s(return)
	gt(p,1)							:s(perm.n) 

*	here for permutations length one, which consists of
*	the letters in s, separated by spaces.
*	Here also we avoid adding duplicate characters

perm.1	
	c = substr(s,i = i + 1,1)				:f(return)
	perm = add(perm, c)					:(perm.1)

perm.n

*	Here if two or more characters in the string. 
*	For each distinct character, the permutations
*	of p items can be found by find the permutations
*	of p-1 items in the string with c removed.

perm.n.1
	gt(i = i + 1,n)						:s(return)
	c = substr(s,i,1)

*	This optimization in next line isn't working, so skip for now
*	skip if have already generated permutations starting with this letter

*	done break(c)						:s(perm.n.1)

*	compute permutations starting with c, by recursively computing the permutations of all the letters
*	that follow c, and then prefixing each permutation in the resulting list with c.

	perm = add(perm,prefix(perm(less(s,c),p - 1),c)) 
*	done = done c
								:(perm.n.1)
perm.end

	define('prefix(str,pre)word')			:(prefix.end)
prefix

*	prefix takes a list of space-separated words str and prefixes each
*	with the string pre.


	str = str ' ';* so each word followed by space
prefix.1
	str break(' ') . word span(' ')  =		:f(return)
	prefix = add(prefix, pre word)			:(prefix.1)
prefix.end


	define('random(n)')				

*	Return integer uniformly distributed in 1,2,...,n. If n=0 returns real uniformly distributed
*	in the interval [0,1]. 
*	The Algorithm is based in that in section 16.1 of "Algorithms in SNOBOL4," James F. Gimpel, John Wiley and Sons, 1976.

	random_var = 1.0;* Gimple uses integer here, but need to have real.

							:(random.end)
random	random_var = remdr(random_var * 4676, 414971)

	random  = random_var / 414971
	random = ne(n,0) convert(random * n,'integer') + 1
							:(return)
random.end

	define('random_rack()i')				:(random_rack.end)

*	Return random set of seven tiles from the initial set of tiles.
*	This is used for testing.
	
random_rack
	gt(i = i + 1,7)					:s(return)
	random_rack = random_rack substr(g.tileset,random(size(g.tileset)),1)	:(random_rack)
random_rack.end

	define('valid(d,w)')				:(valid.end)

*	see if word is in dictionary

valid
	differ(d[w])					:s(return)f(freturn)
valid.end

	define('validate(dict,line)word')		:(validate.end)

*	succeed if line contains only valid words, fail otherwise.	

validate
	line = line ' '
validate.1
	line span(' ') =
	ident(line)					:s(return)
	line break(' ') . word span(' ') =
	valid(dict, word)				:f(freturn)s(validate.1)
validate.end


							;
				k
	define('words(s)i')				:(words.end)
*	return number of space-separated words in s
words
	s = s  ' '
	words = 0
words.1	
	s break(' ') ' ' =				:f(return)
	words = words + 1				:(words.1)
words.end

