	&dump = 3
*	Define global variables.

	&anchor = &trim = 1
	g.digits = span('0123456789')
	g.punctuation = ",;:.?!"
	g.punctuation.spaces = dupl(' ',size(g.punctuation))
*	g.letter = any(&lcase)

	g.tab = char(9)

*	The datatype SONNET represents a sonnet.

	data('sonnet(id,tbl)')

*	where:

*		ID is the number of the sonnet, in the range 1..154; and,
*		TBL is a table mapping the line number within a sonnet
*		to the text of that line.

*	g.tag is the tag for the current line, consisting of g.id and
*	g.num separated by a period. For example, '2.3' is the third line
*	in sonnet 2.

	g.whitespace = span(' ')
	g.word.pat = span(&lcase "'")

*	The key '-1' is used in a table to track the number of keys.

*	G.FREQ is a table mapping a word to the number of times it occurs
*	in the sonnets.


*	G.WORD is a table of words found.  For each WORD in G.WORD,
*	REFLIST is a table mapping WORD to a table of the lines 
*	containing an instance of WORD.

*	G.SONNET is the number of the current sonnet.

*	G.SONNETS is a table mapping the number of a sonnet to a table containing
*	the text of the sonnet.

*	REFERENCES is a list, in increasing order, of the lines that reference a
*	particular word. LIST is a string consisting of line numbers separated
*	by a space. LAST is the most recent line containing a use of the word.
*	This assists is detecting multiple uses of a word in a line. 
*	Consider, for example, the statement 'i = i + 1'.
*	REFLIST is a map from a word to the REFS for it.
	
	data('uses(list,last)')

*	g.id is the number identifying a sonnet.
*	g.num is the line number within a sonnet.

*	g.common is a table of common words to be omitted
*	from the concordance.


	define('gather()i,id,line,s1,s2,s3,s4,str,tag,text')	:(gather.end)

*	Build a concordance for Shakespeare's sonnets, by reading
*	the text of the sonnets from standard input and,
*	for each word in a sonnet, writing out, in alpabetical order,
*	lines consisting of 
*
*		n, the numbers of words used in the sonnets; and
*		for each word used in a sonnet, a line consisting
*		of the number of uses of the word, the word, and
*		a list of the lines containing the word, all these
*		fields being separated by a space.	
*		n, the number of lines in the sonnets;
*		n lines containing the text of the sonnets.

gather

	out('g.sonnets -1',g.sonnets[-1])
	gt(n = n + 1, g.sonnets[-1])			:s(return)

	out('gather',n)

	text = g.sonnets[n]
	id = n
	i = 0

gather.sonnet
	
	gt(i = i + 1,text[-1])					:s(gather)
	line = text[i]

*	Convert line to lower case, remove punctuation marks,
*	and set up for loop to find words.

	line = replace(trim(line),&ucase,&lcase) 
	line = replace(line,g.punctuation,g.punctuation.spaces) 

gather.compact line '  ' = ' '				:s(gather.compact)

	line = trim(line) ' '

gather.word

	out('gather.word line',line)

	line g.word.pat . word span(' ') =		:f(gather)

	out('word',word)

*	Skip words in the common words table.

	out('checking for common')

	ident(g.common[word])				:s(gather.notcommon)
	g.common.n = g.common.n + 1			:(gather.word)

gather.notcommon

	differ(g.word[word])				:s(gather.word.seen)


*	Here on first seeing a word.

	g.uses[-1] = g.uses[-1] + 1
	g.uses[word] = uses(,tag)

gather.word.seen

	out('gather.word.seen',word)
	ident(word)					:s(gather.word)
*	Increment frequency count for word, and add this line 
*	to the list of the lines containing the word.

	out('update g.freq',word,+g.freq[word])
	g.freq[word] = g.freq[word] + 1
	use.add(word)					:(gather.word)
	
gather.end

	define('init()')				:(init.end)

*	Initialize global variables. 

init

	g.freq = table()
	g.freq[-1] = 0

	g.sonnets = table()
	g.sonnets[-1] = 0

	g.uses = table()

	g.word = table()
							:(return)
init.end

	define('out(text1,text2,text3)')		:(out.end)

*	Write out line consisting of TEXT1, followed by 
*	TEXT2 enclossd in '[]' if TEXT2 is not null, followed
*	by TEXT3.

out
	out = text1 ' ' (differ(text2) '[' text2 ']', '') ' ' text3 
	output =  trim(out)				:(return)

out.end

	define('read()s,tag,text')			:(read.end)

*	Read in the text of the sonnets, creating a table
*	entry in G.TEXT for each sonnet, with the key
*	being the sonnet number, and the value being an
*	array of the lines of the text of the sonner.

read

*	Read next line. 

	line = input 					:f(return)
	line 'STOP'					:s(return)
	ident(line)					:f(read.notblank)
							:(read)
read.notblank

*	Skip empty lines.

	ident(line)					:s(read)

*	Skip comments.

	line '*'					:s(read)

*	Look for line consisting of just digits giving the sonnet's number.

	line g.digits					:f(read.text)

*	Here at start of sonnet.

	g.id = +line
	text = table()
	text[-1] = 0
	g.sonnets[g.id] = text
	g.sonnets[-1] = g.sonnets[-1] + 1
							:(read)

read.text

*	Add this line to text of sonnet.
	
	text[-1] = text[-1] + 1
	text[text[-1]] = line				:(read)

read.end

	define('show.freq()i,count,freq,f,n,w')		:(show.freq.end)

*	List the twenty most frequently used words.

show.freq

	freq = rsort(g.freq,2)
	out('The bard used these twenty words most frequently:')

show.freq.next

	le(i = i + 1, 21)				:f(return)
	w = freq[i,1]					:f(return)
	ident(w,'-1')					:s(show.freq.next)
	f = freq[i,2]
	out(rpad(w,12) ' ' lpad(f,6))			:(show.freq.next)

show.freq.end

	define('show.sonnet(id)i,n,sonnet,text')	:(show.sonnet.end)

*	List the text of a sonnet. 

show.sonnet

	text = g.sonnets[id]
	out('Sonnet ',id,' by William Shakespeare.')
	show.text(text)					:(return)

show.sonnet.end

	define('show.sonnets()i,n')			:(show.sonnets.end)

*	List the text of all the sonnets.

show.sonnets

	n = g.sonnets[-1]

show.sonnets.next

	gt(i = i + 1,n)					:s(return)
	show.sonnet(i)					:(show.sonnets.next)

show.sonnets.end

	define('show.text(text)i,txt')			:(show.text.end)

*	List the lines in text.

show.text

	text = copy(text)
	text[-1] = 
	text = convert(text,'array')

show.text.next

	txt = text[i = i + 1,2]				:f(return)
	out(lpad(ti,2) ' ' txt)				:(show.text.next)

show.text.end

	define('show.uses()n,word,refs,ref,this,wi')	:(show.uses.end)
*	Here after scanning the file. Sort the word
*	dictionary in alphabetical order.

show.uses

	n = g.uses[-1]
*	out('listref n ' n
	g.uses[-1] =
	refs = sort(g.uses,1)
	wi = 0

show.uses.word	

	le(wi = wi + 1,n)				:f(return)
	word = refs[wi,1]
*	out('wi ' wi ' ' word
	this = refs[wi,2]
	out( word ':' tab list(this) ' ' last(this)) :(show.uses.word)

show.uses.end

	define('use.add(word)tag.uses')			:(use.add.end)

*	Add this line to the list of uses for WORD unless
*	WORD has already been used in this line.

use.add

	use = g.uses[word]
	tag = g.id '.' g.num
	out('enter new use' word  ' tag [' g.tag ']')
	ident(tag,last(use))	 			:s(return)
	list(use) = list(use) ' ' last(use)
	last(use) = g.tag
	out('leave use word [' word ']  list [' list(use) '] last [' last(use))
							:(return)
use.add.end

	g.common = table()
	:(init.done)
	s1 = 'a an and art but doth for from hath have his in I thou me mine my own '
	s2 = 'shall should than that the thee their then they this thou thy to we '
	s3 = 'were what when where which will with your of i is not you be love or '
	s4 = 'so all as by it do on are if no can nor her yet any now he how '
	str = s1 s2 s3 s4i

init.next
	
	str break(' ') . word ' ' =			:f(init.donc)
	g.common[word] = 1				:(init.next)

init.done

*	Main program

	init()
	read()
	gather()
	show.freq()
 :(end)
	show.uses()
	show.sonnets()
*	show.sonnet(1)
	out('* The bard used ' g.word.n ' words in total, ')
	output = g.common.n ' common words.'
end 

1
dave shields
dan millman dan dave
2
From fairest creatures we desire increase,
That thereby beauty's rose might never die,
But as the riper should by time decease,
STOP
From fairest creatures we desire increase,
That thereby beauty's rose might never die,
But as the riper should by time decease,
His tender heir might bear his memory:
But thou, contracted to thine own bright eyes,
Feed'st thy light's flame with self-substantial fuel,
Making a famine where abundance lies,
Thy self thy foe, to thy sweet self too cruel:
Thou that art now the world's fresh ornament,
And only herald to the gaudy spring,
Within thine own bud buriest thy content,
And tender churl mak'st waste in niggarding:
  Pity the world, or else this glutton be,
  To eat the world's due, by the grave and thee.

2
When forty winters shall besiege thy brow,
And dig deep trenches in thy beauty's field,
Thy youth's proud livery so gazed on now,
Will be a tatter'd weed of small worth held:
Then being asked, where all thy beauty lies,
Where all the treasure of thy lusty days;
To say, within thine own deep sunken eyes,
Were an all-eating shame, and thriftless praise.
How much more praise deserv'd thy beauty's use,
If thou couldst answer 'This fair child of mine
Shall sum my count, and make my old excuse,'
Proving his beauty by succession thine!
  This were to be new made when thou art old,
  And see thy blood warm when thou feel'st it cold.

STOP
3
  But if thou live, remember'd not to be,
  Die single and thine image dies with thee.

Sonnet IV by William Shakespeare
Look in thy glass and tell the face thou viewest
Now is the time that face should form another;
Whose fresh repair if now thou not renewest,
Thou dost beguile the world, unbless some mother.
For where is she so fair whose unear'd womb
Disdains the tillage of thy husbandry?
Or who is he so fond will be the tomb,
Of his self-love to stop posterity?
Thou art thy mother's glass and she in thee
Calls back the lovely April of her prime;
So thou through windows of thine age shalt see,
Despite of wrinkles this thy golden time.
Unthrifty loveliness, why dost thou spend
Upon thy self thy beauty's legacy?
Nature's bequest gives nothing, but doth lend,
And being frank she lends to those are free:
Then, beauteous niggard, why dost thou abuse
The bounteous largess given thee to give?
Profitless usurer, why dost thou use
So great a sum of sums, yet canst not live?
For having traffic with thy self alone,
Thou of thy self thy sweet self dost deceive:
Then how when nature calls thee to be gone,
What acceptable audit canst thou leave?
  Thy unused beauty must be tombed with thee,
  Which, used, lives th' executor to be.
