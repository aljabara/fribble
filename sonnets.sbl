
	define('gather()tag,s1,s2,s3,s4,str')		:(gather.end)

*	Build a concordance for Shakespeare's sonnets, by reading
*	the text of the sonnets from standard input and,
*	for each word in a sonnet, writing out, in alpabetical order,
*	lines consisting of 
*
*		n, the numbers of words used in the sonnets; and
*		for each word used in a sonnet, a line consisting
*		of the number of uses of the word, the word, and
*		a list of the lines containing the word, all these
*		fields being separated by a space.	
*		n, the number of lines in the sonnets;
*		n lines containing the text of the sonnets.

gather
gather.line

*	Read next line. Maintain a count of the number of lines in line.n.

	line = input 					:f(return)
	output = 'gather.line in [' line ']'
	line 'STOP'					:s(return)
	ident(line)					:f(gather.notblank)
							:(gather.line)
gather.notblank

	g.linenum = g.linenum + 1

*	Skip empty lines.

	ident(line)					:s(gather.line)

*	Skip comments.

	line '*'					:f(gather.nocomment)
	saveline(line)
							:(gather.line)
	

gather.nocomment

	
	output = 'gather no comment ' lpad(g.linenum,5) g.tab line

*	Look for line consisting of just digits giving the sonnet's
*	number.

	line g.digits					:f(gather.notitle)

*	Here at start of sonnet.

	output = 'gather new sonnet'
	output = 'resetting g.id ' g.id
	g.id = line
	g.num = 1
	line = 'Sonnet ' g.id ' by William Shakespeare'
	g.num = g.num + 1
	g.tag = g.id '.' g.num
	saveline(line)
							:(gather.line)

gather.notitle

*	Convert line to lower case, remove punctuation marks,
*	and set up for loop to find words.

	saveline(line)
	line = replace(trim(line),&ucase,&lcase) 
	line = replace(line,g.punctuation,g.punctuation.spaces) 

gather.compact line '  ' = ' '					:s(gather.compact)

	line = trim(line) ' '

gather.word

	output = 'gather.word line [' line ']'

*	line break(' ') . word ' ' =			:f(gather.line)
	line g.word.pat . word span(' ') =		:f(gather.line)

*	output = 'word [' word ']'

*	Skip words in the common words table.
	output = 'checking for common'

	ident(g.common[word])				:s(gather.notcommon)
	g.common.n = g.common.n + 1			:(gather.word)

gather.notcommon

	differ(g.words[word])				:s(gather.word.seen)


*	Here on first seeing a word.

	g.words.n = g.words.n + 1
	g.refs[word] = references(,tag)
	g.refs[-1] = g.refs[-1] + 1

gather.word.seen

	output = 'gather.word.seen ' word
	ident(word)					:s(gather.word)
*	Increment frequency count for word, and add this line 
*	to the list of the lines containing the word.

	g.freq[word] = g.freq[word] + 1
	newref(word)					:(gather.word)
	
gather.end

	define('init()')				:(init.end)

init


	&anchor = &trim = 1
	g.digits = span('0123456789')
	g.punctuation = ",;:.?!"
	g.punctuation.spaces = dupl(' ',size(g.punctuation))
*	g.letter = any(&lcase)

	g.tab = char(9)

*	g.tag is the tag for the current line, consisting of g.id and
*	g.num separated by a period. For example, '2.3' is the third line
*	in sonnet 2.

	g.whitespace = span(' ')
	g.word.pat = span(&lcase "'")

*	For each table, the key -1 is used to maintain a 
*	count of the number of entries in the table.

*	G.FREQ is a table mapping a word to the number of times it occurs
*	in the sonnets.

	g.freq = table()
	g.freq[-1] = 0

*	G.WORDS is a table of words found.  For each WORD in G.WORDS,
*	REFLIST is a table mapping WORD to a table of the lines 
*	containing an instance of WORD.

	g.words = table()
	g.words[-1] = 0

*	GLINES is a table mapping source line numbers to the line text.

	g.lines = table()
	g.linenum = 0

*	REFERENCES is a list, in increasing order, of the lines that reference a
*	particular word. LIST is a string consisting of line numbers separated
*	by a space. LAST is the most recent line containing a use of the word.
*	This assists is detecting multiple uses of a word in a line. 
*	Consider, for example, the statement 'i = i + 1'.
*	REFLIST is a map from a word to the REFS for it.
	
	data('references(list,last)')

	g.refs = table(1000)
	g.refs[-1] = 0

*	g.id is the number identifying a sonnet.
*	g.num is the line number within a sonnet.

*	g.common is a table of common words to be omitted
*	from the concordance.

	g.common = table()
	s1 = 'a an and art but doth for from hath have his in I thou me mine my own '
	s2 = 'shall should than that the thee their then they this thou thy to we '
	s3 = 'were what when where which will with your of i is not you be love or '
	s4 = 'so all as by it do on are if no can nor her yet any now he how '
	str = s1 s2 s3 s4i

init.next
	
	str break(' ') . word ' ' =			:f(return)
	g.common[word] = 1				:(init.next)

init.end

	define('listfreq()i,count,freq,f,w')		:(listfreq.end)

*	List the twenty most frequently used words.

listfreq

	g.freq[-1] =
	freq = rsort(g.freq,2)
	output = 'dt g.freq ' datatype(g.freq) ' dt freq ' datatype(freq)

	output = 'The bard used these twenty words most frequently:'

listfreq.next

	le(i = i + 1, 20)				:f(return)
	w = freq[i,1]					:f(return)
	f = freq[i,2]
	output = rpad(w,12) ' ' lpad(f,6)		:(listfreq.next)

listfreq.end

	define('listlines()i,n')			:(listlines.end)

*	List the lines of the sonnets. First write the
*	number of lines and then write the text of all the sonnet's lines.

listlines

	n = g.lines.n
	output = n

listlines.next

	le(i = i + 1, n)				:f(return)
	output = g.lines[i]				:(listlines.next)

listlines.end

	define('newref(word)ref')			:(newref.end)

*	Add this line to the list of references for WORD, avoiding
*	adding a new entry in the same line as the most recent
*	use of WORD.

newref
		
	output = 'enter new ref[' word  '] tag[' g.tag ']'

	ref = g.refs[word]
	ident(tag,last(ref))	 			:s(return)
	list(ref) = list(ref) ' ' last(ref)
	last(ref) = g.tag
	output = 'leave ref word [' word ']  list [' list(ref) '] last [' last(ref)
							:(return)

newref.end

	define('listrefs()n,word,refs,ref,this,wi')			:(listrefs.end)
*	Here after scanning the file. Sort the word
*	dictionary in alphabetical order.

listrefs

	n = g.refs[-1]
*	output = 'listref n ' n
	g.refs[-1] =
	refs = sort(g.refs,1)
	wi = 0

listrefs.word	

	le(wi = wi + 1,n)					:f(return)
	word = refs[wi,1]
*	output = 'wi ' wi ' ' word
	this = refs[wi,2]
	output =  word ':' tab list(this) ' ' last(this)	:(listrefs.word)

listrefs.end

	define('saveline(line,tag)n')				:(saveline.end)

*	Save line, prefixed by its tag, in the g.lines table.

saveline

	output = 'saving line[' g.tag '] [' line ']'
	g.lines[glines.n = g.lines.n + 1] = g.tag ' ' line 	:(return)

saveline.end

*	Main program.

	init()
	gather()
	listfreq()
	listrefs()
*	listlines()
	output = '* The bard used ' g.words.n ' words in total, '
.		g.common.n ' common words.'
end 

1
dave shields
dan millman dan dave
STOP
From fairest creatures we desire increase,
That thereby beauty's rose might never die,
But as the riper should by time decease,
His tender heir might bear his memory:
But thou, contracted to thine own bright eyes,
Feed'st thy light's flame with self-substantial fuel,
Making a famine where abundance lies,
Thy self thy foe, to thy sweet self too cruel:
Thou that art now the world's fresh ornament,
And only herald to the gaudy spring,
Within thine own bud buriest thy content,
And tender churl mak'st waste in niggarding:
  Pity the world, or else this glutton be,
  To eat the world's due, by the grave and thee.

2
When forty winters shall besiege thy brow,
And dig deep trenches in thy beauty's field,
Thy youth's proud livery so gazed on now,
Will be a tatter'd weed of small worth held:
Then being asked, where all thy beauty lies,
Where all the treasure of thy lusty days;
To say, within thine own deep sunken eyes,
Were an all-eating shame, and thriftless praise.
How much more praise deserv'd thy beauty's use,
If thou couldst answer 'This fair child of mine
Shall sum my count, and make my old excuse,'
Proving his beauty by succession thine!
  This were to be new made when thou art old,
  And see thy blood warm when thou feel'st it cold.

STOP
3
  But if thou live, remember'd not to be,
  Die single and thine image dies with thee.

Sonnet IV by William Shakespeare
Look in thy glass and tell the face thou viewest
Now is the time that face should form another;
Whose fresh repair if now thou not renewest,
Thou dost beguile the world, unbless some mother.
For where is she so fair whose unear'd womb
Disdains the tillage of thy husbandry?
Or who is he so fond will be the tomb,
Of his self-love to stop posterity?
Thou art thy mother's glass and she in thee
Calls back the lovely April of her prime;
So thou through windows of thine age shalt see,
Despite of wrinkles this thy golden time.
Unthrifty loveliness, why dost thou spend
Upon thy self thy beauty's legacy?
Nature's bequest gives nothing, but doth lend,
And being frank she lends to those are free:
Then, beauteous niggard, why dost thou abuse
The bounteous largess given thee to give?
Profitless usurer, why dost thou use
So great a sum of sums, yet canst not live?
For having traffic with thy self alone,
Thou of thy self thy sweet self dost deceive:
Then how when nature calls thee to be gone,
What acceptable audit canst thou leave?
  Thy unused beauty must be tombed with thee,
  Which, used, lives th' executor to be.
