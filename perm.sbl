
* This software is licensed under the MIT License, contained in the file LICENSE.

* Copyright (c) 2016 dave shields

-include "util.sbl"

	&anchor = &trim = 1

	define('add(str,word)')			:(add.end)

*	add word to string str, prefixing with a space if str 
*	is not null.  	this aids in building list of words 
*	separated by spaces.

add
	add = ident(str) word			:s(return)
	add = str ' ' word				:(return)
add.end

	define('perm(s,p)n,i,duplicates,t')		:(perm.end)

*	perm(s,d) returns all the permutations from string s
*	with length p, as a list of words separated by spaces.

perm

*	build perm as list of entries separated by space. Will
*	eliminate extra space at the end before returning.

*	if s contains more than one instance of a letter, then
*	only need to compute once the permutations that start
*	with that letter. *done* is used to avoid duplicate
*	permutations


*	output = "enter perm " s ' ' p

	t = s
perm.duplicates
	t len(1) . c =				:f(perm.duplicates.1)
	duplicates break(c)				:f(perm.duplicates)
	duplicates = add(duplicates,c)		:(perm.duplicates)
perm.duplicates.1

	n = +size(s)
	eq(p,0)						:s(return)
	gt(p,1)						:s(perm.n) 

*	here for permutations length one, which consists of
*	the letters in s, separated by spaces.
*	Here also we avoid adding duplicate characters

perm.1	
	c = substr(s,i = i + 1,1)			:f(perm.done)
	perm = add(perm, c)				:(perm.1)

perm.n

*	Here if two or more characters in the string. 
*	For each distinct character, the permutations
*	of p items can be found by find the permutations
*	of p-1 items in the string with c removed.

perm.n.1
*	output = 'perm.n.1 s=' s  ',' i '.'
	gt(i = i + 1,n)					:s(perm.done)
	c = substr(s,i,1)

*	move on if have already computed permutations that
*	begin with the same letter.
*	duplicates break(c)				:s(perm.n.1)
*	subperm = perm(less(s,c),p - 1)
*	output = 'subperm ' subperm

*	compute permutations starting with c.

	perm = add(perm,prefix(perm(less(s,c),p - 1),c)) :(perm.n.1)
perm.done
*	output = "exit  perm " perm
							:(return)
perm.end

	define('prefix(str,pre)word')		:(prefix.end)
prefix

*	prefix takes a list of space-separated words str and prefixes each
*	with the string pre.

*	output = 'enter prefix ' pre '->' str 

	str = str ' ';* so each word followed by space
prefix.1
	str break(' ') . word span(' ')  =		:f(prefix.done)
	prefix = add(prefix, pre word)		
*	output = 'prefix loop ' prefix '.'

							:(prefix.1)
prefix.done
*	output = 'exit  prefix ' prefix
prefix.end


	digits = '123456789'
	n = 3

*test.1
*	gt(n = n +1, 3)					:s(end)
*	p = 0
test.2
	gt(p = p + 1,n)					:s(end)
*	output = 'n ' n ' p ' p
	output = lpad(n,4) lpad(p,4) char(9)
.		perm(substr(digits,1,n), p)		:(test.2)
end
