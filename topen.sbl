

-include "util.sbl"


	define('open(tiles,dict,value)n,high,w')					:(open.end)

*	determine best opening move. At least one letter in this move must be in the center square (8,8).
*	There are only DW bonus cells on this line, at (8,4) and (8,12). If we play first letter at (8,8),
*	the score will be the sum of the individual letter scores if play less than five tiles, or double
*	the sum if play five or more tiles.

*	It's an open question where best to start the word, so for now we'll start our opening move on
*	the center square (8,8). 

*	There are seven tiles, so we just try all permutations of length one up to seven.

*	The return value has the form 's m' where s is the score and m is the opening move (which will
*	begin with '0808>').

open
	n = 0;* number of tiles to play
	high = 0;* highest score
	output = 'tiles ' tiles

	output = 'open ' tiles 
open.1	gt(n = n + 1,7)						:s(open.3)
*open.1	gt(n = n + 1,3)						:s(open.3)

*	Get permutations and replace ordinals with actual tile letters. Then iterate over the permutations.
	perms = replace(perm(tiles,n,value),'1234567',tiles) ' '
*	output = n ' ' perms
open.2
	perms break(' ') . w ' ' =			:f(open.1)
	valid(dict,w)					:f(open.2)
	p = '0808>' w
*	compute value of w using quick approximation for now
	vw = w; wval = 0
vloop
	vw len(1) . vc =				:f(vloop.done)
	wval = wval + value[vc]				:(vloop)
vloop.done
	v = wval
*	v = value[p]
*	output = 'test p ' p ' v ' v
	lt(v,hv)					:s(open.2)
	output = 'updating value hv ' hv '  p ' hp
	hp = p
	hv = v						:(open.2)
open.3
	open = hv hw					:(return)
open.end

 
	&anchor = &trim = 1
*	&dump = 3
*	test open
	dict = getdict("study/test.txt")		:s(d.open)
	output = 'cannot open dict'			:(end)

d.open
*	cvalue is map from individual characters to their value
	cvalue = valueinit()

loop
	output = '?' 
	tiles = '1gapabcg'
	tiles = 'cgap234'
*	tiles = input					:f(done)
	ident(tiles)					:s(done)
	ident(tiles)					:s(end)
	output = 'tiles ' tiles
	move = open(tiles,dict,cvalue)			
*	output = move					:(loop)
	output = move				
done	
*	&dump = 
end
