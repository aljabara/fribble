* Copyright 2017, David Shields

-include "lib.sbl"

*	Compute various assessments of code structure and size.

	&anchor = &trim = 1
	tab = char(9)
	init(1)
	dict = table(1000)

	define('report(text,count)')		:(report.end)

*	Report an assessment result.

report

	output = lpad(text,16) ' ' lpad(count,6) :(return)

report.end

next

	line = input				:f(scanned)
	lines.total = lines.total + 1
	line = replace(line,tab,' ')

despace

	line breakx(' ') '  ' = ' '		:s(despace)
	differ(line)				:s(notempty)
	lines.blank = lines.blank + 1		:(next)

notempty

	chars.total = chars.total + size(line)

	line '*'				:f(text)

*	Here if comment

	lines.comment = lines.comment + 1	
	chars.comment = 
.		chars.comment + size(line)	:(next)

text

	lines.code = lines.code + 1
	chars.code = chars.code + size(line)
	words = words(line)
	n = prototype(words)
	n break(',') . n
	words.total = words.total + n
	i = 0
word

	word = words[i = i + 1,2]		:f(next)
	dict[word] = dict[word] + 1		:(word)

scanned

	report('total lines'		, lines.total)
	report('blank lines'		, lines.blank)
	report('comment lines'		, lines.comment)
	report('code lines'		, lines.code)
	report('comment chars'		, chars.comment)
	report('code chars'		, chars.code)
	report('total chars'		, chars.total)
	report('total words'		, words.total)

	dict = sort(dict,2)
	n = prototype(dict)
	n  break(',') . words.distinct
	report('distinct words'		, words.distinct)

end
