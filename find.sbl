
    define('find(pid,turn)rack,num,inlines,line,moves,mi,m,perms,perm,'
.        'permi,fline,tline,cline,highest,lowest,i,p,score,move,tried,f.moves')
.                                                       :(find.end)

*   Find all the valid moves and their scores given the current board
*   and the indicated rack. For each line, find the set of all
*   possible moves for that line. Then for each move check the options
*   (permutations) that can be played from the tiles.  For each
*   specific permutation, see if the resulting line contains only valid
*   words.  If not, go on to the next permutation. If true, then see if
*   all the lines affected by the move contain only valid words.
*   If not, go on to the next permutation. If so, then add up the
*   scores of all new words created by the move.

*   From amongst the valid moves determine the best move as follows.
*   If two moves have different scores, prefer the one with the
*   higher score.

*   The 'cost' of a move is the sum of the values of the tiles in the
    move; so want to keep cost low to save higher value tiles for
*   later moves. If two moves have the same score and different costs,
*   prefer the move with the lower cost.  If two moves have the same
*   score and cost, while one uses the letter 's' and the other doesn't,
*   prefer the move that doesn't use the letter 's'.

*   Find returns the best move as defined above, or null if it is unable
*   to find a valid move.

find

*   See if first move, in which case call start()

    find = ne(f.mode,f.mode.move) eq(turn,1) start(pid) :s(return)

    rack = rack(g.players[pid])
    show.grid(g.board)

    g.moves = table()
    g.moves.n = 0
    lines = copy(g.lines)
    inlines = copy(lines)
    g.highest = 0;* highest score this turn
    g.lowest = 0;* lowest cost this turn
    num = 0

find.line

    gt(num = num + 1,30)                                :s(find.done)
    line = lines[num]
*   out(ne(g.tracing) 'Find.line ' lpad(lineid(num),3) ' ' show.line(line))
    moves = scan(pair(num,line),rack)                   :f(find.line)
    mi = 0

find.move

    count.moves = count.moves + 1
    move = moves[mi = mi + 1,2]                         :f(find.line)
*   out(ne(g.tracing) 'Find.move mi ' mi ' ' show.move(move,'find'))
    points(move) =
    permi = 0

*   The rack will almost always have at least two, and sometimes three,
*   identical letters.  Use *tried* to track texts that have been tried,
*   to avoid duplicate testing for validity of the same text.

    tried = table(500)

    perms = g.permutations[text(move)]                  :s(find.perm.next)

*   Something must be wrong with the requested permutation

    out('fatal permutation request ',text(move))        :(end)

find.perm.next

    perm = perms[permi = permi + 1]                     :f(find.move)
    ident(perm)                                         :s(find.move)
    find.perm(rack,perm,num,move,inlines,tried)         :f(find.perm.next)

find.score

    score = 0

*   out(ne(g.tracing) 'Found valid move ' show.move(move) ' in '
*.              show.pair(pair(num,line)))

*   Score the line by summing the scores of the lines saved in clines.

*   out(ne(g.tracing) 'valid move :' line '  move '  id(move) ' '
*.              size((text(move)) '  '
*.              free(move)[1] '...' free(move)[size(text(move))]
*.              ' ' text(move)))

    count.valid = count.valid + 1
    move = copy(move)

*   out(ne(g.tracing) 'Find cross ' show.move(move) '  text=' text(move))
*   ne(g.tracing) show.move(move)
*   ne(g.tracing) show.play(move)
*   out(ne(g.tracing) 'Find calling scoremove')

    points(move) = +scoremove(move)

    g.moves[g.moves.n = g.moves.n + 1] = move

*   eq(f.mode,f.mode.move) out(show.move(move))
*   eq(f.mode,f.mode.move) gt(points(move),9) out(show.move(move))
    g.cln = 0;* reset for next permutation
    find = isbest(move) copy(move)                      :(find.perm.next)

find.done

    ident(find)                                         :s(find.fail)

    ne(f.mode,f.mode.move)                              :s(return)
    f.moves = array(g.moves.n)
    i = 0

find.done.copy
    f.moves[i = i + 1] = g.moves[i]
    lt(i,g.moves.n)                                     :s(find.done.copy)
    f.moves = rsort(f.moves,.points)
    out('sorted')
    i = 0

find.done.list

    i = i + 1
    gt(i,g.moves.n)                                     :s(return)
    gt(i,8)                                             :s(return)
*   out('i',i)
*   zmov = f.moves[i]
*   out('dt move',datatype(zmov))
    out(show.move(f.moves[i]))                          :(find.done.list)
    
find.fail

*   out('find failed ')

    output = ident(find) 'find FAILED, no move found.'

                                                        :(freturn)
find.end

    define('find.perm(rack,perm,num,move,inlines,tried)'
.               'text,lines,iline,i,p,cline')           :(find.perm.end)

*   Assess effect of permutation, failing if it doesn't
*   produce a valid movel

find.perm

*   NOTE: THE LOOP BELOW IS THE CRITICAL INNER LOOP OF THIS PROGRAM.
*   TIME SPENT SPEEDING THINGS UP ELSEWHERE WILL HAVE LITTLE EFFECT.
*
*   For example, given a move of length 7 with a rack of 7 letters,
*   we need to account for the slightly over 5000 permutations of
*   the letters that can be used here. And note this is just
*   for one possible move ...
*
*   Since most racks will contain duplicate, or even triplicate,
*   instances of the same letter, the table *tried* is used below.
*   This cut the running time of the program by a factor of two
*   when first introduced.

    count.perm = count.perm + 1
    count.cells = count.cells + size(perm)

    g.cln = 0

    text = place(perm,rack)

*   See if we have already tested this text.

    differ(tried[text])                                 :s(freturn)
    tried[text] = 1;* note that we have reviewed this text


    lines = copy(inlines);

*   Insert the letters from the tiles corresponding to the
*   permutation into the selected blank cells in the line.
*   The digit '1' selects the first tile, the digit '2' the second,
*   and so on.  Then see if the result gives a valid line. Move
*   to the next permutation if not.

    text(move) = perm
    iline = insert(lines[num],move)
    checkline(place(iline,rack))                        :f(freturn)

*   Move is valid on this line, so check validity on crossing
*   lines.Save the valid lines in *clines* for scoring if move
*   proves valid.

*   We could use the clines() procedure for this, but in this loop
*   every statement counts, so in effect we build clines on the fly.
*   Since almost all permutations will result in junk, we want to
*   detect junk as soon as possible so we can move on without
*   needless effort.

    text(move) = text

*   ne(g.tracing) out('Find valid first ' show.move(move) ' ' show.line(line))

    g.clines[g.cln = g.cln + 1]
.                       = pair( id(move), insert(lines[num],move))
    i = 0

*   Check the crossing lines, constructing them as needed,
*   to make sure the move is valid.

find.perm.cross

*   out('find cross ')

*   If next assignment fails, we have finished checking the
*   permutation without finding a valid move, and so return failure.

    p = free(move)[i = i + 1]                           :f(return)
    cline = cline(lines,move,p,substr(rack,substr(perm,i,1),1))
    checkline(line(cline))                              :f(freturn)

*   out(ne(g.tracing) 'Find valid checkline ' line(cline))

    text(move) = place(text(move),ucase(rack))

*   out(ne(g.tracing) 'Find text ' text(move))

    g.clines[g.cln = g.cln + 1] = cline                 :(find.perm.cross)

find.perm.end

    define('scan(pair,rack)num,line,i,pi,open,oi,nopen,n,'
.                       'first,pos,move,sub,len')       :(scan.end)

*   Scan the given line to find the places where a valid move can be made.
*   At least one cell in a move must be adjacent to an occupied cell.
*   *line* is the line to be scanned, and *num* gives
*   its position on the board.

scan

    line = line(pair)
    num = num(pair)

*   ne(g.tracing) out('Scan line ' lineid(num) ' ' show.line(line) ' ' show.hex(line))

*   Allocate and fill in *open*, an array giving the
*   positions of the open cells.
*   Fail if no empty cells.

    open = avail(pair)                                  :f(scan.done)

*   Nopen is the number of open cells in the line.

    nopen = +prototype(open)
*   ne(g.tracing) out('number of open cells',nopen)

    pi = 0

scan.first

    first = open[pi = pi + 1]                           :f(scan.done)

*   *first* is the position of the first letter in the move.

*   The number of moves *n* that can be made starting at a given
*   position in *open* depends on the number of tiles in the rack,
*   and the number of remaining open cells in the line.

    n = +size(rack)
    n = gt(n, nopen - pi) nopen - pi;* number of remaining open cells

*   Try for moves of length len=n,n-1...1 starting at position _first_ in the line.

    len = n + 1;* prime for loop

scan.len

    le(len = len - 1)                                   :s(scan.first)

*   ne(g.tracing) out('Scan first=' first ' left =' (nopen - pi) ' n=' n ' len=' len)

*   At least one cell to be occupied by this move must be
*   adjacent to a used cell.

    oi = 0

scan.used

    gt(oi = oi + 1,len)                                 :s(scan.len)
    pos = open[pi + oi - 1]                             :f(scan.first)
*   ne(g.tracing) out('Scan oi=' oi ' pos=' pos)
    adjacent(row(num,pos),column(num,pos))              :f(scan.used)s(scan.text)

*   If a move of length *len* has no adjacent cells, then no move
*   of lesser length can have adjacent cells, so we can advance to
*   the next possible starting point.

                                                        :(scan.first)
scan.text

*   Here if adjacent cell found. Set text of move to
*   the permutation specification.

    sub = subarray(open,pi,len)                         :f(scan.len)
    move = move(num,sub,size(rack) '?' len)             :f(scan.len)
*   ne(g.tracing) out('Scan move ' show.move(move))
    scan = ident(scan) table()
    count.scanned = count.scanned + 1
    scan[count.scanned] = move                          :(scan.len)

scan.done

    ident(scan)                                         :s(freturn)
    scan = convert(scan,'array')
                                                        :(return)
scan.end

    define('scoreline(pair)'
.               'line,word,words,wi,n,start,ch,i,bonus,mult,val'):(scoreline.end)

*   Compute the score of a move on a given line. All the letters of
*   the move will be in upper case on the board so the score of the move
*   is the sum of the scores of all the words with upper case letters in
*   them, for both rows and columns. This function should only be called
*   for lines which have an upper case letter in them as a result of the move.

scoreline

    scoreline = 0
    line = line(pair)
    empty(line)                                         :s(return)
    bonusline = g.bonus.lines[num(pair)]
    line break(&ucase)                                  :f(scoreline.error)
    words = words(line)                                 :f(scoreline.done)
    wi = 0

scoreline.word

    start = words[wi = wi + 1,1]                        :f(scoreline.done)
    word = words[wi,2]
    word break(&ucase)                                  :f(scoreline.word)
    ne(g.tracing) out('scoreline wi=' wi ' start=' start ' word=' word)
    n = size(word)

*   Words of just one letter don't contribute to scoreline since
*   they result from a crossing line.

    eq(n,1)                                             :s(scoreline.word)

    line = substr(line,start)

*   Extract corresponding part of bonus line.

    bonusline = substr(g.bonus.lines[num(pair)],start);

    i = 0
    mult = 1;* multiplier value for double and triple word cases.

scoreline.char

    gt(i = i + 1,n)                                     :s(scoreline.char.done)
    ch = substr(word,i,1)
    bonus = +substr(bonusline,i,1)

*   Update scoreline according to value of letter. Always get at
*   least the value of the letter, and may get double or
*   triple the letter value.

    val = g.value[ch]
    val = eq(bonus,2) val * 2
    val = eq(bonus,3) val * 3
    scoreline = scoreline + val
    ne(g.tracing) out('ch=' ch ' val=' val ' scoreline now ' scoreline)

*   Update double/triple word multiplier.

    mult = eq(bonus,4) mult * 2
    mult = eq(bonus,5) mult * 3
                                                        :(scoreline.char)


scoreline.char.done

    scoreline = ne(scoreline) scoreline * mult
    ne(g.tracing) out('mult=' mult ' scoreline=' scoreline)
                                                        :(scoreline.word)
scoreline.error

    out('error tracing line with no new move ' line(pair))
    scoreline = 0                                       :(return)

scoreline.done

*   ne(g.scoremove) out('scoreline returns ' scoreline)
                                                        :(return)
scoreline.end

    define('scoremove(move)i,p')                        :(scoremove.end)

*   A move's score is the sum of the scores of its own line
*   and its crossing lines.

scoremove

*   In order to determine which words on the board would be
*   formed by making this move, rebuild *clines* but with the
*   new tiles in uppercase. This way, a word is new if and only if
*   it contains an upper case character. The score is then the
*   sum over all the lines of the scores of the words containing an
*   upper-case character. At most one word in each line of grid will
*   contain an upper-case character.

*   Generate move's line and its cross lines with the move's
*   text in upper case.

    clines(move,1);

    ne(g.tracing) show.clines()
    ne(g.tracing) out('scoremove move=' show.move(move))
    ne(g.tracing) out('g.cln=' g.cln)

    i = 0

scoremove.line

    ne(g.tracing) out('scoremove line' i)
    gt(i = i + 1,g.cln)                                 :s(scoremove.done)
    ne(g.tracing) out('scoremove i=' i ' scoremove =' scoremove)
    scoremove = scoremove + scoreline(g.clines[i])      :(scoremove.line)

scoremove.done

*   There is a bonus of 35 points for playing seven tiles in one move.

    scoremove  = eq(size(size(text(move))),7) scoremove + 35;

    ne(g.tracing) out('scoremove returns ' scoremove)
                                                        :(return)
scoremove.end

    define('seen(perm,rack,test)p,c,cp,cmap,next,signature,map,d,dp,dmap'):(seen.end)

*   Test if a permutation has already been processed in this turn.

*   Racks will typically contain duplicate letters. We can make use of this
*   to avoid useless duplication of effort.
*
*   For example, if first and third letters are the same then in any permutation
*   we can interchange the positions of this letter with no effect. Simply put,
*   if there are two "E" tiles, it doesn't matter in what order we play them.
*
*   For example, given the rack 'FRIBBLE', there are two B's, at positions five
*   and six, so the signature for permutation '1234567'  is
*
*           1234557
*
*   If later see a permutation such as '1234657', it will have
*   the same signature, and so will not need to investigate
*   futher -- we can move directly to the next permutation.

*   Define a map *dmap* from digits to characters by
*   iterating over the permutation. If *d* is the
*   digit at position *p*, let *c* be the character
*   at position *d* in the rack. This is the character
*   corresponding to *d*. Set *dmap[d]* to *c*.

*   Define a map *cmap* from characters to digits by iterating
*   over the rack. Let *c* be the character at position *p*.
*   If *cmap[c]* is null, this is the first instance of *c*;
*   set *cmap[c]* to *p*. This will be the value used to
*   represent each instance of *c* in the new permutation.

*   Iterate over the permutation to build an equivalent
*   permutation. Let *d* be the digit at
*   position *p*. Set *c* to the value of *dmap[d]*, then
* `     set the next digit in the new permutation to the value of
*   *cmap[c]*.


*   The result is the signature, or normal form, of the permutation.

*   Look up the result in the table *seen*. It the value is not
*   null then we have already seen an equivalent permutation,
*   and so return success.

*   If the value is null, enter the new permutation as the representation
*   of the input permutation, and return failure.

seen
    ident(perm)                                         :s(freturn)
    ident(rack)                                         :s(freturn)

    g.cmap = table('cmap')
    g.dmap = table('dmap')
    cp = dp = 0

seen.d

    d = substr(perm,dp = dp + 1,1)                      :f(seen.c)
    c = substr(rack,d,1)
    out('g.map')
    g.dmap[d] = c
                                                        :(seen.d)
seen.c

    c = substr(rack,cp = cp + 1,1)                      :f(seen.mapped)
    out('GET seen.c ')
    ident(g.cmap[c]) g.cmap[c] = convert(cp,'string')   :(seen.c)

seen.mapped

    dp = 0
    signature =

seen.next

    d = substr(perm,dp = dp + 1,1)                      :f(seen.check)
    c = g.dmap[d]
    signature = signature g.cmap[c]                     :(seen.next)

seen.check

                                                        :(seen.outed)
    seens = seens + 1
*   gt(seens,10000) :s(end)

    ne(remdr(seens,100))                                :s(seen.outed)
    out()
    show(g.dmap)
    out()
    show(g.cmap)
    out()

     out('seen.check rack=' rack ' ' perm ' -> ' signature)

seen.outed

    g.signature = signature
    count.signature = count.signature + 1

*   Succeed if have already seen this signature.

*   out('seen same perm=' perm ' rack=' rack )

    out('GET seen.outed ')
    differ(g.tried[signature])                          :s(return)

*   Here if first encounter with this signature.

    g.tried[signature] = 1
                                                        :(freturn)

*   out('seen new signature ' signature ' perm=' perm ' rack=' rack '.')
*   See if we have seen an equivalent permutation before.

*   Comapute signature of permutation and rack to account for presence
*   any duplicate tiles.


*   :(freturn)

seen.end

    define('start(pid)player,tiles,perm,perms,permi,free,offset,i,'
.               'highest,lower,best,n,word,start,score,move,max'):(start.end)

*   Determine best starting.turn. At least one letter in this move
*   must be in the center square (8,8). The only bonus available is
*   double word, for any word of more than four characters.

*   Find the move the highest score. Given two moves with the
*   same score, prefer the one with the lowest tile cost.
*
*   The return value has the form 'm s' where m is the move
*   and s is its score.
*
*   There are seven tiles, so we just try all permutations
*   of length one up to seven.

start

    max = 7;* maximum number of tiles to play
    player = g.players[pid]
    tiles = rack(player)
    n = 0;* number of tiles to play
    highest = lowest = 0;* best score, lowest cost

*   Assume word will start in column 8

    start = 8

*   Don't use 's' on starting move: save it for later.

    tiles break('s')                                    :f(start.n)
    tiles = less(tiles,'s')
    max = max - 1

start.n gt(n = n + 1,max)                               :s(start.done)

    kind = size(tiles) '?' n
*   out('start.n kind=' kind)
    perms = g.permutations[kind]                        :f(start.n)
    permi = 0

start.word

*   Get next word, check that valid, then see if new high score

    perm = perms[permi = permi + 1]                     :f(start.n)
    word = replace(perm,substr('1234567',1,size(tiles)),tiles)

*   out('kind ' kind ' perm ' perm ' word ' word)
    checkword(word)                                     :f(start.word)
    checkwords = checkwords + 1

*   Score is the value of the tiles unless the word has five or
*   more characters, in which case the double word bonus
*   at index twelve can be achieved.

    score = (lt(size(word),5) cost(word), 2 * cost(word))

*   See if get bonus for playing seven tiles.

    score = eq(size(word),7) score + 35

*   Add the first word found to set *highest* and *lowest*

    eq(highest,0)                                       :s(start.new)

    lt(score,highest)                                   :s(start.word)
    gt(score,highest)                                   :s(start.new)

*   Here if current best and new move have same score.
*   Prefer the one with the lowest cost.

    lt(cost(word),lowest)                               :s(start.new)

start.new

    highest = score
    lowest = cost(word)
    best = word
                                                        :(start.word)
start.done

*   Start word at position 8, unless word size greater than
*   five, in which case move it to the left, but making sure
*   move still covers double-word cell at position twelve.

    offset = (lt(size(best,5) 0, 5 - size(best)))

*   Initialize free array for move.

    free = array(size(best))
    i = 0

start.free

    free[i = i + 1] = 7 + i  + offset                   :s(start.free)

    start = move(8 + offset,free,best,highest)          :(return)

start.end

    define('test.perm(rack,perm,num,move,inlines)'
.               'text,lines,iline,i,p,cline')           :(test.perm.end)

*   Test if applying a permutation PERM to a rack RACK yields a valid move.
*   NUM is the line containing the move, and INLINES is a list of
*   the lines from the grid to be used.

test.perm

*   NOTE: THE LOOP BELOW IS THE CRITICAL INNER LOOP OF THIS PROGRAM.
*   ANY TIME SPENT SPEEDING THINGS UP ELSEWHERE WILL HAVE LITTLE EFFECT.
*
*   For example, given a move of length 7 with a rack of 7 letters, we
*   need to account for the slightly over 5000 permutations of the letters
*   that can be used here. And note this is just for one possible move ...
*
*   Since most racks will contain duplicate, or even triplicate, instances of
*   the same letter, the table *tried* is used below. This cut the running
*   time of the program by a factor of two when first introduced.

    count.perm = count.perm + 1

    seen(perm)                                          :s(freturn)
    count.cells = count.cells + size(perm)

    g.cln = 0

    text = place(perm,rack)

    lines = copy(inlines);

*   Insert the letters from the tiles corresponding to the permutation
*   into the selected blank cells in the line.  The digit '1' selects
*   the first tile, the digit '2' the second, and so on.  Then see if
*   the result gives a valid line. 'move' to the next permutation if not.
*   (This is a clever use of replace(), even if I do say so myself.)

    text(move) = perm;* insert permutation digits into free cells
    iline = insert(lines[num],move);* line with permutation digits entered
    checkline(place(iline,rack))                        :f(freturn)

*   'move' is valid on this line, so check validity on crossing lines.
*   Save the valid lines in *clines* for scoring if move proves valid.

*   We could use the clines() procedure for this, but in this loop every
*   statement counts, so in effect we build clines on the fly.
*   Since almost all permutations will result in junk, we want to
*   detect junk as soon as possible so we can move on without wasting
*   needless effort.

    text(move) = text

*   out(ne(g.tracing) 'Find valid first '
*           show.move(move) ' ' show.line(line))

    g.clines[g.cln = g.cln + 1] =  pair( id(move), insert(lines[num],move))
    i = 0

*   Check the crossing lines, constructing them as needed, to make sure the
*   move is valid.

test.perm.cross

*   out('find cross ')

*   If next assignment fails, we have finished checking the
*   permutation without finding a valid move, and so return failure.

    p = free(move)[i = i + 1]                           :f(return)
    cline = cline(lines,move,p,substr(rack,substr(perm,i,1),1))
    checkline(line(cline))                              :f(freturn)

*   out(ne(g.tracing) 'Find valid checkline ' line(cline))

    text(move) = place(text(move),ucase(rack))

*   out(ne(g.tracing) 'Find text ' text(move))

    g.clines[g.cln = g.cln + 1] = cline                 :(test.perm.cross)

test.perm.end
    define('valid.start(move)free,num,text')            :(valid.start.end)

*   Test if a suggested starting move is valid.

valid.start

*   If this is a starting move, check that it covers column 8 in row 8,
*   and is a word in the dictionary.

    free = free(move)
    text = text(move)

    num = convert(free,'integer')                       :f(valid.start.free)

    out('valid.start.start num=' num)

    lt(num,9 - size(text))                              :s(valid.start.error)
    gt(num,7 + size(text))                              :s(valid.start.error)

valid.start.free

*   Here if free is list of cells. Check that '8' is one of them.

    out('valid.start.start.free ' show.move(valid.start))
    out('valid.start.start.free ' free(valid.start))

    free break('8')                                     :f(valid.start.error)
    checkword(text(move))                               :s(return)f(freturn)

valid.start.start.error

    out('starting move must use column 8.')             :(freturn)

valid.start.end

    define('valid(move)num,i,pos')                      :(valid.end)

*   Test if move is valid.

valid
valid.move

*   At least one cell to be occupied by this move must be
*   adjacent to a used cell.

    num = id(move)

valid.u

    gt(i = i + 1,size(text(move)))                      :s(freturn)
    pos = free(move)[i]
    adjacent(row(num,pos),column(num,pos))              :f(valid.u)s(valid.used)

*   Here if no adjacent cell found, fail.  *
                                                        :(freturn)
valid.used

*   Test that line and all its crossing lines are valid.

    clines(move);* get line and its crossing lines
    i = 0

valid.i

    gt(i = i + 1,g.cln)                                 :s(return)
    checkline(line(g.clines[i]))                        :f(freturn)s(valid.i)

valid.end

    define('avail(pair)line,spaces,c,i,oi')             :(avail.end)

*   Return array containing the indexes of the avail (blank) cells in line.
*   Fail if no cells are available.

avail

    line = line(pair)
    spaces = spaces(line)
    eq(spaces,0)                                        :s(freturn)
    avail = array(spaces)
    i = ai = 0

avail.c

    c = substr(line, i = i + 1, 1)                      :f(avail.done)
    differ(c,' ')                                       :s(avail.c)
    avail[oi = oi + 1] = +i                             :(avail.c)

avail.done

    eq(g.tracing)                                       :s(return)
    i = 0; c =

avail.done.ch

    c = c lpad(avail[i = i + 1],3)                      :s(avail.done.ch)
*           show.hex(line) '|  |' show.line(line) '| is ' c)
                                                        :(return)
avail.end

    define('bonus.lines()i')                            :(bonus.lines.end)

bonus.lines

    bonus.lines = array(30)

bonus.lines.next

    gt(i = i + 1,15)                                    :s(return)
    bonus.lines[i] = hline(g.bonus,i)
    bonus.lines[i + 15] = vline(g.bonus,i)              :(bonus.lines.next)

bonus.lines.end

    define('checkline(line)word')                       :(checkline.end)

*   Test if all the words in a line are in the dictionary.

checkline

    count.checkline = count.checkline + 1
    line span(' ') =
    empty(line)                                         :s(return)
    line = line ' ';* to simplify breaking out words.

checkline.1

    line span(' ') =
    line break(' ')  . word ' ' =                       :f(return)
    eq(size(word),1)                                    :s(checkline.1)
    checkword(word)                                     :f(freturn)s(checkline.1)

checkline.end

    checkwordn = 0

    define('checkword(word)')                           :(checkword.end)

*   Test if a word is in the dictionary.

checkword

    count.checkword = count.checkword + 1

*   Accept words of a single character since they can occur in crossing lines.

    eq(size(word),1)                                    :s(return)

    word = lcase(word);* in case upper case letters have wrongly crept it.
    differ(g.dict[size(word)][word])                    :f(freturn)s(return)

checkword.end

    define('cline(lines,move,p,ch)c,line')              :(cline.end)

*   Return crossing line of p-th cell in move *move*.
*   *ch* gives tile to be played.

cline

    count.cline = count.cline + 1

*   Cross line of row r, position p, is column p.
*   Cross line of column c, position p, is row p.

    c = (le(id(move),15) p + 15, p);* cross line id
    line = lines[c];* cross line
    p = (le(id(move),15) id(move), id(move) - 15);* position to insert
    line = substr(line,1,p - 1) ucase(ch) substr(line,p + 1)
    cline = pair(c,line)                                :(return)

cline.end

    define('clines(move,upper)p,c,ch,line')             :(clines.end)

*   Update g.clines to contain the line for move *move* and all
*   its crossing lines. Express the letters of the move in upper case
*   (for later scoring) if *upper* is not null.

clines

    line = g.lines[id(move)]
    p = free(move)[1]

*   First entry is for the line containing the move

    g.cln = 1
    g.clines[1] = pair(id(move), insert(g.lines[id(move)],move,1))
    i = 1

*   On each pass through the loop, we compute the crossing line of the
*   i-th character in the move.

clines.i

    p = free(move)[i]


*   Cross line of row r, position p,  is column p.
*   Cross line of column c, position p, is row p.

    c = (le(id(move),15) p + 15, p);* cross line
    line = g.lines[c];* cross line
    p = (le(id(move),15) id(move), id(move) - 15);* position to insert
    ch = substr(text(move),i,1)
    line = (gt(p,1) substr(line,1,p - 1),'')
.                (differ(upper) ucase(ch), ch) (lt(p,15) substr(line,p + 1),'')
    g.clines[g.cln = g.cln + 1] = pair(c, (ident(upper) lcase(line), line))
    le(i = i + 1, size(text(move)))                     :s(clines.i)f(return)

clines.end

    define('column(num,pos)')                           :(column.end)

*   Returns column corresponding to position *pos* in line *num*.

column

    column = ((gt(num,15) num - 15, pos))               :(return)

column.end

    define('cost(text)')                                :(cost.end)

*   Return the cost of *text*, defined as the sum of the
*   values of the tiles in *text*.

cost

    text len(1) . ch =                                  :f(return)
    cost = cost + g.value[ch]                           :(cost)

cost.end

    define('insert(line,move,upper)c,f,i,text')         :(insert.end)

*   Insert the text of a move into its free list of empty
*   cells in the line of the move.  Express the text in upper case
*   if *upper* is not null.

insert

    count.insert = count.insert + 1
    text = (differ(upper) ucase(text(move)), text(move))
    f = free(move)
    c = size(text(move))
    ne(f[c] - f[1], c - 1)                              :s(insert.chars)

*   Here if cells are contiguous. Insert text after part before it,
*   and before part after it.

    count.insert.contig = count.insert.contig + 1

    insert = substr(line, 1, f[1] - 1) text substr(line, f[c] + 1)
    out(ne(size(line),15) 'insert failure ' line)       :s(end)
                                                        :(return)
insert.chars

*   Here if cells not contiguous. Unpack the line, insert the
*   move text, and pack it back up.

    count.insert.split = count.insert.split + 1

    insert = unpack(line)

insert.ch

    gt(i = i + 1,size(text(move)))                      :s(insert.done)
    insert[free(move)[i]] = substr(text,i,1)            :(insert.ch)

insert.done

    insert = pack(insert)                               :(return)

insert.end

    define('isbest(move)')                              :(isbest.end)

*   Test the score of a move to see if it the best yet seen in a turn.

isbest

    out(ne(f.showscore) 'Find points(move) ' points(move)
.               '  highest=' g.highest ' lowest=' g.lowest)

    lt(points(move),g.highest)                          :s(freturn)
    gt(points(move),g.highest)                          :s(isbest.new)

*   Here if points equal, look for lower cost

    lt(cost(text(move)),g.lowest)                       :s(isbest.new)
    gt(cost(text(move)),g.lowest)                       :s(freturn)

*   Here if same points and cost, see if one uses 's' and the
*   other doesn't.  Continue search if current best doesn't use 's'.

    text(find) ? break('s')                             :f(freturn)

*   Here if current best uses an 's'.
*   Continue if new move also uses 's'.

    text(move) ? break('s')                             :s(freturn)

isbest.new

*   Here to add the new best move.

    g.highest = points(move)
    g.lowest = cost(text(move))
*   out(ne(g.tracing) 'find NEW BEST move ' show.move(move))
                                                        :(return)
isbest.end

    define('order(tiles)chars,ch,c1,c2,swaps,i,v1,v2')  :(order.end)

*   Sort the tiles in *tiles* according to their value, with
*   least valuable first.  Though 's' has a nominal value of 1,
*   its actual value is greater, since almost a third of
*   the words in the dictionary are plurals. Give 's' a value
*   of 5 for the purpose of the sort.

order
    order = le(size(tiles),2) tiles                     :s(return)
    chars = unpack(tiles)
                                                        :(order.loop)
order.next

    eq(swaps,0)                                         :s(order.done)
    swaps = i = 0

*   Loop through chars, swapping out of order characters,

*    until all characters are properly ordered.

order.loop

    c1 = chars[i = i + 1]                               :f(order.next)
    c2 = chars[i + 1]                                   :f(order.next)
    v1 = (ident(c1,'s') 5, g.value[c1])
    v2 = (ident(c2,'s') 5, g.value[c2])
    le(v1,v2)                                           :s(order.loop)
    ch = c2
    chars[i + 1] = c1
    chars[i] = ch
    swaps = swaps + 1                                   :(order.loop)

order.done

    order = pack(chars)                                 :(return)

order.end

*   pack.sizes = array(30)

    define('place(txt,rack)')                           :(place.end)

*   Place the permutation digits in *txt* with the
*   corresponding tiles from *rack*.

place

    place = replace(txt,substr('1234567',1,size(rack)),rack)
                                                        :(return)
place.end

    define('hline(g,r)')                                :(hline.end)

*   Return the horizontal line of grid *g* corresponding to
*   row *r* as a string.

hline

    r = +r
    hline = g[r,1] g[r,2] g[r,3] g[r,4] g[r,5]
.               g[r,6] g[r,7] g[r,8] g[r,9] g[r,10]
.               g[r,11] g[r,12] g[r,13] g[r,14] g[r,15]
                                                        :(return)
hline.end


    define('vline(g,c)')                                :(vline.end)

*   Return the vertical line of  grid *g* corresponding
*   to column *c* as a string.

vline

    c = +c
    vline = g[1,c] g[2,c] g[3,c] g[4,c] g[5,c]
.               g[6,c] g[7,c] g[8,c] g[9,c] g[10,c]
.               g[11,c] g[12,c] g[13,c] g[14,c] g[15,c]
                                                        :(return)
vline.end

